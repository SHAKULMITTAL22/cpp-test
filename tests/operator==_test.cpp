// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <system_error>
#include <memory>

// Test fixture for error_category operator== tests
class ErrorCategoryOperatorEqualTest : public ::testing::Test {
protected:
    void SetUp() override {
        // Setup code if needed
    }

    void TearDown() override {
        // Cleanup code if needed
    }
};

// Test suite for error_category operator== functionality
TEST_F(ErrorCategoryOperatorEqualTest, SameObjectComparison_ReturnsTrue) {
    // Test that comparing an error_category object with itself returns true
    const std::error_category& category = std::generic_category();
    
    EXPECT_TRUE(category == category);
}

TEST_F(ErrorCategoryOperatorEqualTest, SameInstanceViaReference_ReturnsTrue) {
    // Test that comparing the same instance via different references returns true
    const std::error_category& category1 = std::system_category();
    const std::error_category& category2 = std::system_category();
    
    EXPECT_TRUE(category1 == category2);
}

TEST_F(ErrorCategoryOperatorEqualTest, DifferentCategoryTypes_ReturnsFalse) {
    // Test that comparing different error category types returns false
    const std::error_category& generic_cat = std::generic_category();
    const std::error_category& system_cat = std::system_category();
    
    EXPECT_FALSE(generic_cat == system_cat);
}

TEST_F(ErrorCategoryOperatorEqualTest, DifferentCategoryInstances_ReturnsFalse) {
    // Test that comparing different instances of error categories returns false
    const std::error_category& system_cat = std::system_category();
    const std::error_category& generic_cat = std::generic_category();
    
    EXPECT_FALSE(system_cat == generic_cat);
    EXPECT_FALSE(generic_cat == system_cat);
}

TEST_F(ErrorCategoryOperatorEqualTest, EdgeCase_ComparisonWithConstQualifiers) {
    // Test edge case with const qualifiers to ensure proper comparison
    const std::error_category& const_category = std::generic_category();
    std::error_category const& another_const_ref = std::generic_category();
    
    EXPECT_TRUE(const_category == another_const_ref);
}

// Additional test suite for comprehensive coverage
class ErrorCategoryComparisonBehaviorTest : public ::testing::Test {
protected:
    // Custom error category for testing purposes
    class TestErrorCategory : public std::error_category {
    public:
        const char* name() const noexcept override {
            return "test_category";
        }
        
        std::string message(int condition) const override {
            return "test error message";
        }
    };
    
    TestErrorCategory test_category1;
    TestErrorCategory test_category2;
};

TEST_F(ErrorCategoryComparisonBehaviorTest, CustomCategorySelfComparison_ReturnsTrue) {
    // Test that a custom error category compares equal to itself
    EXPECT_TRUE(test_category1 == test_category1);
}

TEST_F(ErrorCategoryComparisonBehaviorTest, DifferentCustomCategoryInstances_ReturnsFalse) {
    // Test that different instances of the same custom category type return false
    EXPECT_FALSE(test_category1 == test_category2);
}

TEST_F(ErrorCategoryComparisonBehaviorTest, CustomVsStandardCategory_ReturnsFalse) {
    // Test that custom category compared with standard category returns false
    const std::error_category& system_cat = std::system_category();
    
    EXPECT_FALSE(test_category1 == system_cat);
    EXPECT_FALSE(system_cat == test_category1);
}

TEST_F(ErrorCategoryComparisonBehaviorTest, PointerBasedComparison_ValidatesAddressEquality) {
    // Test that the comparison is indeed based on object addresses
    const std::error_category* ptr1 = &std::generic_category();
    const std::error_category* ptr2 = &std::generic_category();
    const std::error_category* ptr3 = &std::system_category();
    
    // Same category type should have same address
    EXPECT_EQ(ptr1, ptr2);
    EXPECT_TRUE(*ptr1 == *ptr2);
    
    // Different category types should have different addresses
    EXPECT_NE(ptr1, ptr3);
    EXPECT_FALSE(*ptr1 == *ptr3);
}

TEST_F(ErrorCategoryComparisonBehaviorTest, EdgeCase_MultipleReferencesToSameObject) {
    // Test edge case with multiple references to the same object
    const std::error_category& ref1 = std::generic_category();
    const std::error_category& ref2 = std::generic_category();
    const std::error_category& ref3 = ref1;
    
    EXPECT_TRUE(ref1 == ref2);
    EXPECT_TRUE(ref1 == ref3);
    EXPECT_TRUE(ref2 == ref3);
}

// Main function to run all tests
int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
