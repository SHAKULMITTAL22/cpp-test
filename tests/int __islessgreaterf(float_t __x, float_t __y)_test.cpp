// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __islessgreaterf function
class IsLessGreaterFloatTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsLessGreaterFloatTest, PositiveNumbers_ReturnsTrue) {
    EXPECT_EQ(__islessgreaterf(1.0f, 2.0f), 1);
    EXPECT_EQ(__islessgreaterf(2.0f, 1.0f), 1);
}

TEST_F(IsLessGreaterFloatTest, NegativeAndPositive_ReturnsTrue) {
    EXPECT_EQ(__islessgreaterf(-1.0f, 1.0f), 1);
    EXPECT_EQ(__islessgreaterf(1.0f, -1.0f), 1);
}

TEST_F(IsLessGreaterFloatTest, EqualValues_ReturnsFalse) {
    EXPECT_EQ(__islessgreaterf(5.0f, 5.0f), 0);
    EXPECT_EQ(__islessgreaterf(0.0f, 0.0f), 0);
}

TEST_F(IsLessGreaterFloatTest, NegativeZeroAndPositiveZero_ReturnsFalse) {
    EXPECT_EQ(__islessgreaterf(-0.0f, 0.0f), 0);
    EXPECT_EQ(__islessgreaterf(0.0f, -0.0f), 0);
}

// Negative test cases - NaN handling
TEST_F(IsLessGreaterFloatTest, FirstArgumentNaN_ReturnsFalse) {
    float nan_val = std::numeric_limits<float>::quiet_NaN();
    EXPECT_EQ(__islessgreaterf(nan_val, 1.0f), 0);
    EXPECT_EQ(__islessgreaterf(nan_val, 0.0f), 0);
}

TEST_F(IsLessGreaterFloatTest, SecondArgumentNaN_ReturnsFalse) {
    float nan_val = std::numeric_limits<float>::quiet_NaN();
    EXPECT_EQ(__islessgreaterf(1.0f, nan_val), 0);
    EXPECT_EQ(__islessgreaterf(0.0f, nan_val), 0);
}

TEST_F(IsLessGreaterFloatTest, BothArgumentsNaN_ReturnsFalse) {
    float nan_val1 = std::numeric_limits<float>::quiet_NaN();
    float nan_val2 = std::numeric_limits<float>::quiet_NaN();
    EXPECT_EQ(__islessgreaterf(nan_val1, nan_val2), 0);
}

// Edge cases
TEST_F(IsLessGreaterFloatTest, InfinityValues_ReturnsTrue) {
    float pos_inf = std::numeric_limits<float>::infinity();
    float neg_inf = -std::numeric_limits<float>::infinity();
    
    EXPECT_EQ(__islessgreaterf(pos_inf, 1.0f), 1);
    EXPECT_EQ(__islessgreaterf(1.0f, pos_inf), 1);
    EXPECT_EQ(__islessgreaterf(neg_inf, 1.0f), 1);
    EXPECT_EQ(__islessgreaterf(1.0f, neg_inf), 1);
    EXPECT_EQ(__islessgreaterf(pos_inf, neg_inf), 1);
}

TEST_F(IsLessGreaterFloatTest, EqualInfinityValues_ReturnsFalse) {
    float pos_inf = std::numeric_limits<float>::infinity();
    float neg_inf = -std::numeric_limits<float>::infinity();
    
    EXPECT_EQ(__islessgreaterf(pos_inf, pos_inf), 0);
    EXPECT_EQ(__islessgreaterf(neg_inf, neg_inf), 0);
}

TEST_F(IsLessGreaterFloatTest, VerySmallNumbers_ReturnsTrue) {
    float epsilon = std::numeric_limits<float>::epsilon();
    EXPECT_EQ(__islessgreaterf(epsilon, 2.0f * epsilon), 1);
    EXPECT_EQ(__islessgreaterf(2.0f * epsilon, epsilon), 1);
}

TEST_F(IsLessGreaterFloatTest, MaxAndMinFloatValues_ReturnsTrue) {
    float max_val = std::numeric_limits<float>::max();
    float min_val = std::numeric_limits<float>::lowest();
    
    EXPECT_EQ(__islessgreaterf(max_val, min_val), 1);
    EXPECT_EQ(__islessgreaterf(min_val, max_val), 1);
    EXPECT_EQ(__islessgreaterf(max_val, 0.0f), 1);
    EXPECT_EQ(__islessgreaterf(min_val, 0.0f), 1);
}

TEST_F(IsLessGreaterFloatTest, DenormalizedNumbers_ReturnsTrue) {
    float denorm = std::numeric_limits<float>::denorm_min();
    EXPECT_EQ(__islessgreaterf(denorm, 1.0f), 1);
    EXPECT_EQ(__islessgreaterf(1.0f, denorm), 1);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
