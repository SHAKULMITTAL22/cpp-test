// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __isgreaterequal function
class IsGreaterEqualTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsGreaterEqualTest, PositiveCase_GreaterValues) {
    // Test when first argument is greater than second
    EXPECT_EQ(__isgreaterequal(5.0, 3.0), 1);
    EXPECT_EQ(__isgreaterequal(10.5, 2.3), 1);
    EXPECT_EQ(__isgreaterequal(100.0, 99.999), 1);
}

TEST_F(IsGreaterEqualTest, PositiveCase_EqualValues) {
    // Test when both arguments are equal
    EXPECT_EQ(__isgreaterequal(5.0, 5.0), 1);
    EXPECT_EQ(__isgreaterequal(0.0, 0.0), 1);
    EXPECT_EQ(__isgreaterequal(-3.14, -3.14), 1);
    EXPECT_EQ(__isgreaterequal(1.23456789, 1.23456789), 1);
}

// Negative test cases
TEST_F(IsGreaterEqualTest, NegativeCase_SmallerValues) {
    // Test when first argument is smaller than second
    EXPECT_EQ(__isgreaterequal(3.0, 5.0), 0);
    EXPECT_EQ(__isgreaterequal(-10.0, -5.0), 0);
    EXPECT_EQ(__isgreaterequal(2.999, 3.0), 0);
}

TEST_F(IsGreaterEqualTest, NegativeCase_NegativeNumbers) {
    // Test with negative numbers where first is less than second
    EXPECT_EQ(__isgreaterequal(-15.5, -10.2), 0);
    EXPECT_EQ(__isgreaterequal(-100.0, 50.0), 0);
    EXPECT_EQ(__isgreaterequal(-0.001, 0.0), 0);
}

// Edge case tests
TEST_F(IsGreaterEqualTest, EdgeCase_SpecialValues) {
    // Test with infinity values
    double pos_inf = std::numeric_limits<double>::infinity();
    double neg_inf = -std::numeric_limits<double>::infinity();
    
    EXPECT_EQ(__isgreaterequal(pos_inf, 1000.0), 1);
    EXPECT_EQ(__isgreaterequal(pos_inf, pos_inf), 1);
    EXPECT_EQ(__isgreaterequal(1000.0, pos_inf), 0);
    EXPECT_EQ(__isgreaterequal(neg_inf, -1000.0), 0);
    EXPECT_EQ(__isgreaterequal(-1000.0, neg_inf), 1);
}

TEST_F(IsGreaterEqualTest, EdgeCase_NaNValues) {
    // Test with NaN values - should return 0 due to isunordered check
    double nan_val = std::numeric_limits<double>::quiet_NaN();
    
    EXPECT_EQ(__isgreaterequal(nan_val, 5.0), 0);
    EXPECT_EQ(__isgreaterequal(5.0, nan_val), 0);
    EXPECT_EQ(__isgreaterequal(nan_val, nan_val), 0);
}

TEST_F(IsGreaterEqualTest, EdgeCase_ZeroValues) {
    // Test with positive and negative zero
    double pos_zero = 0.0;
    double neg_zero = -0.0;
    
    EXPECT_EQ(__isgreaterequal(pos_zero, neg_zero), 1);
    EXPECT_EQ(__isgreaterequal(neg_zero, pos_zero), 1);
    EXPECT_EQ(__isgreaterequal(pos_zero, pos_zero), 1);
    EXPECT_EQ(__isgreaterequal(neg_zero, neg_zero), 1);
}

TEST_F(IsGreaterEqualTest, EdgeCase_VerySmallNumbers) {
    // Test with very small numbers near machine epsilon
    double epsilon = std::numeric_limits<double>::epsilon();
    
    EXPECT_EQ(__isgreaterequal(epsilon, 0.0), 1);
    EXPECT_EQ(__isgreaterequal(0.0, epsilon), 0);
    EXPECT_EQ(__isgreaterequal(epsilon, epsilon), 1);
}

TEST_F(IsGreaterEqualTest, EdgeCase_MaxMinValues) {
    // Test with maximum and minimum representable values
    double max_val = std::numeric_limits<double>::max();
    double min_val = std::numeric_limits<double>::lowest();
    
    EXPECT_EQ(__isgreaterequal(max_val, min_val), 1);
    EXPECT_EQ(__isgreaterequal(min_val, max_val), 0);
    EXPECT_EQ(__isgreaterequal(max_val, max_val), 1);
    EXPECT_EQ(__isgreaterequal(min_val, min_val), 1);
}

// Main function to run all tests
int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
