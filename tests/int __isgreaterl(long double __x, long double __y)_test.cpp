// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __isgreaterl function
class IsGreaterLTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsGreaterLTest, PositiveNumbers_FirstGreaterThanSecond) {
    EXPECT_EQ(__isgreaterl(5.5L, 3.2L), 1);
    EXPECT_EQ(__isgreaterl(100.0L, 50.0L), 1);
}

TEST_F(IsGreaterLTest, NegativeNumbers_FirstGreaterThanSecond) {
    EXPECT_EQ(__isgreaterl(-1.5L, -3.7L), 1);
    EXPECT_EQ(__isgreaterl(-10.0L, -20.0L), 1);
}

TEST_F(IsGreaterLTest, MixedNumbers_PositiveGreaterThanNegative) {
    EXPECT_EQ(__isgreaterl(1.0L, -1.0L), 1);
    EXPECT_EQ(__isgreaterl(0.1L, -0.1L), 1);
}

// Negative test cases
TEST_F(IsGreaterLTest, EqualNumbers_ReturnsFalse) {
    EXPECT_EQ(__isgreaterl(5.5L, 5.5L), 0);
    EXPECT_EQ(__isgreaterl(0.0L, 0.0L), 0);
    EXPECT_EQ(__isgreaterl(-3.14L, -3.14L), 0);
}

TEST_F(IsGreaterLTest, FirstSmallerThanSecond_ReturnsFalse) {
    EXPECT_EQ(__isgreaterl(3.2L, 5.5L), 0);
    EXPECT_EQ(__isgreaterl(-5.0L, -2.0L), 0);
    EXPECT_EQ(__isgreaterl(-1.0L, 1.0L), 0);
}

// Edge cases
TEST_F(IsGreaterLTest, ZeroComparisons) {
    EXPECT_EQ(__isgreaterl(1.0L, 0.0L), 1);
    EXPECT_EQ(__isgreaterl(0.0L, 1.0L), 0);
    EXPECT_EQ(__isgreaterl(-1.0L, 0.0L), 0);
    EXPECT_EQ(__isgreaterl(0.0L, -1.0L), 1);
}

TEST_F(IsGreaterLTest, VerySmallNumbers) {
    long double epsilon = std::numeric_limits<long double>::epsilon();
    EXPECT_EQ(__isgreaterl(epsilon, 0.0L), 1);
    EXPECT_EQ(__isgreaterl(0.0L, epsilon), 0);
    EXPECT_EQ(__isgreaterl(2.0L * epsilon, epsilon), 1);
}

TEST_F(IsGreaterLTest, VeryLargeNumbers) {
    long double max_val = std::numeric_limits<long double>::max();
    long double large_val = max_val / 2.0L;
    EXPECT_EQ(__isgreaterl(max_val, large_val), 1);
    EXPECT_EQ(__isgreaterl(large_val, max_val), 0);
}

TEST_F(IsGreaterLTest, InfinityComparisons) {
    long double pos_inf = std::numeric_limits<long double>::infinity();
    long double neg_inf = -std::numeric_limits<long double>::infinity();
    
    EXPECT_EQ(__isgreaterl(pos_inf, 1000.0L), 1);
    EXPECT_EQ(__isgreaterl(1000.0L, pos_inf), 0);
    EXPECT_EQ(__isgreaterl(neg_inf, -1000.0L), 0);
    EXPECT_EQ(__isgreaterl(-1000.0L, neg_inf), 1);
    EXPECT_EQ(__isgreaterl(pos_inf, neg_inf), 1);
    EXPECT_EQ(__isgreaterl(neg_inf, pos_inf), 0);
}

TEST_F(IsGreaterLTest, NaNComparisons_ReturnsFalse) {
    long double nan_val = std::numeric_limits<long double>::quiet_NaN();
    
    // NaN comparisons should always return false due to isunordered check
    EXPECT_EQ(__isgreaterl(nan_val, 1.0L), 0);
    EXPECT_EQ(__isgreaterl(1.0L, nan_val), 0);
    EXPECT_EQ(__isgreaterl(nan_val, nan_val), 0);
    EXPECT_EQ(__isgreaterl(nan_val, 0.0L), 0);
    EXPECT_EQ(__isgreaterl(0.0L, nan_val), 0);
}

TEST_F(IsGreaterLTest, DenormalizedNumbers) {
    long double min_val = std::numeric_limits<long double>::denorm_min();
    EXPECT_EQ(__isgreaterl(min_val, 0.0L), 1);
    EXPECT_EQ(__isgreaterl(0.0L, min_val), 0);
    EXPECT_EQ(__isgreaterl(2.0L * min_val, min_val), 1);
}

TEST_F(IsGreaterLTest, NegativeZeroComparison) {
    long double pos_zero = 0.0L;
    long double neg_zero = -0.0L;
    
    // Positive and negative zero should be considered equal
    EXPECT_EQ(__isgreaterl(pos_zero, neg_zero), 0);
    EXPECT_EQ(__isgreaterl(neg_zero, pos_zero), 0);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
