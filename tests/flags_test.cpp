// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <iostream>
#include <sstream>

// Test fixture class for ios_base flags function tests
class IosFlagsTest : public ::testing::Test {
protected:
    void SetUp() override {
        // Initialize a stringstream for testing
        ss.clear();
        ss.str("");
    }

    void TearDown() override {
        // Clean up after each test
        ss.clear();
    }

    std::stringstream ss;
};

// Test Suite: Basic Functionality Tests
TEST_F(IosFlagsTest, SetAndReturnPreviousFlags_ValidFlags) {
    // Test setting decimal flag and getting previous flags
    std::ios_base::fmtflags original_flags = ss.flags();
    std::ios_base::fmtflags previous_flags = ss.flags(std::ios_base::dec);
    
    EXPECT_EQ(previous_flags, original_flags);
    EXPECT_EQ(ss.flags(), std::ios_base::dec);
}

TEST_F(IosFlagsTest, SetHexadecimalFlags_ValidOperation) {
    // Test setting hexadecimal flags
    ss.flags(std::ios_base::dec);  // Set initial state
    std::ios_base::fmtflags previous_flags = ss.flags(std::ios_base::hex);
    
    EXPECT_EQ(previous_flags, std::ios_base::dec);
    EXPECT_EQ(ss.flags(), std::ios_base::hex);
}

// Test Suite: Multiple Flag Operations
TEST_F(IosFlagsTest, SetMultipleFlags_CombinedFlags) {
    // Test setting multiple flags combined with bitwise OR
    std::ios_base::fmtflags combined_flags = std::ios_base::hex | std::ios_base::showbase | std::ios_base::uppercase;
    std::ios_base::fmtflags original_flags = ss.flags();
    std::ios_base::fmtflags previous_flags = ss.flags(combined_flags);
    
    EXPECT_EQ(previous_flags, original_flags);
    EXPECT_EQ(ss.flags(), combined_flags);
}

TEST_F(IosFlagsTest, SetScientificNotationFlags_ValidCombination) {
    // Test setting scientific notation with precision flags
    std::ios_base::fmtflags sci_flags = std::ios_base::scientific | std::ios_base::showpos;
    std::ios_base::fmtflags previous_flags = ss.flags(sci_flags);
    
    EXPECT_EQ(ss.flags(), sci_flags);
    EXPECT_NE(previous_flags, sci_flags);
}

// Test Suite: Edge Cases
TEST_F(IosFlagsTest, SetZeroFlags_EdgeCase) {
    // Test setting flags to zero (no formatting flags)
    ss.flags(std::ios_base::hex | std::ios_base::showbase);  // Set some initial flags
    std::ios_base::fmtflags previous_flags = ss.flags(static_cast<std::ios_base::fmtflags>(0));
    
    EXPECT_NE(previous_flags, static_cast<std::ios_base::fmtflags>(0));
    EXPECT_EQ(ss.flags(), static_cast<std::ios_base::fmtflags>(0));
}

// Test Suite: State Preservation Tests
TEST_F(IosFlagsTest, ConsecutiveFlagChanges_StatePreservation) {
    // Test multiple consecutive flag changes preserve state correctly
    std::ios_base::fmtflags flags1 = std::ios_base::dec;
    std::ios_base::fmtflags flags2 = std::ios_base::hex | std::ios_base::showbase;
    std::ios_base::fmtflags flags3 = std::ios_base::oct;
    
    std::ios_base::fmtflags original = ss.flags();
    std::ios_base::fmtflags prev1 = ss.flags(flags1);
    std::ios_base::fmtflags prev2 = ss.flags(flags2);
    std::ios_base::fmtflags prev3 = ss.flags(flags3);
    
    EXPECT_EQ(prev1, original);
    EXPECT_EQ(prev2, flags1);
    EXPECT_EQ(prev3, flags2);
    EXPECT_EQ(ss.flags(), flags3);
}

TEST_F(IosFlagsTest, SetSameFlagsMultipleTimes_IdempotentOperation) {
    // Test setting the same flags multiple times
    std::ios_base::fmtflags target_flags = std::ios_base::fixed | std::ios_base::showpoint;
    
    ss.flags(target_flags);
    std::ios_base::fmtflags prev1 = ss.flags(target_flags);
    std::ios_base::fmtflags prev2 = ss.flags(target_flags);
    
    EXPECT_EQ(prev1, target_flags);
    EXPECT_EQ(prev2, target_flags);
    EXPECT_EQ(ss.flags(), target_flags);
}

// Test Suite: Boundary Value Tests
TEST_F(IosFlagsTest, SetAllPossibleFlags_MaximumFlags) {
    // Test setting all possible formatting flags
    std::ios_base::fmtflags all_flags = std::ios_base::boolalpha | std::ios_base::dec | 
                                       std::ios_base::fixed | std::ios_base::hex | 
                                       std::ios_base::internal | std::ios_base::left | 
                                       std::ios_base::oct | std::ios_base::right | 
                                       std::ios_base::scientific | std::ios_base::showbase | 
                                       std::ios_base::showpoint | std::ios_base::showpos | 
                                       std::ios_base::skipws | std::ios_base::unitbuf | 
                                       std::ios_base::uppercase;
    
    std::ios_base::fmtflags previous_flags = ss.flags(all_flags);
    
    EXPECT_EQ(ss.flags(), all_flags);
    EXPECT_NE(previous_flags, all_flags);
}

// Test Suite: Functional Behavior Tests
TEST_F(IosFlagsTest, FlagsAffectOutput_BehavioralTest) {
    // Test that flag changes actually affect stream behavior
    ss.flags(std::ios_base::hex | std::ios_base::showbase | std::ios_base::uppercase);
    ss << 255;
    std::string hex_output = ss.str();
    
    ss.str("");  // Clear the stream
    ss.flags(std::ios_base::dec);
    ss << 255;
    std::string dec_output = ss.str();
    
    EXPECT_NE(hex_output, dec_output);
    EXPECT_EQ(hex_output, "0XFF");
    EXPECT_EQ(dec_output, "255");
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
