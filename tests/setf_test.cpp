// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <iostream>
#include <ios>

// Test fixture class for ios_base::setf function tests
class IosBaseSetfTest : public ::testing::Test {
protected:
    void SetUp() override {
        // Reset stream flags to default state before each test
        stream.flags(std::ios_base::dec);
    }
    
    std::iostream stream{nullptr}; // Test stream object
};

// Test Suite: Basic Functionality Tests
TEST_F(IosBaseSetfTest, SetSingleFlag_ReturnsOldFlags) {
    // Arrange
    std::ios_base::fmtflags initial_flags = stream.flags();
    
    // Act
    std::ios_base::fmtflags old_flags = stream.setf(std::ios_base::hex, std::ios_base::basefield);
    
    // Assert
    EXPECT_EQ(old_flags, initial_flags);
    EXPECT_TRUE(stream.flags() & std::ios_base::hex);
}

TEST_F(IosBaseSetfTest, SetMultipleFlags_ReturnsOldFlags) {
    // Arrange
    std::ios_base::fmtflags initial_flags = stream.flags();
    std::ios_base::fmtflags new_flags = std::ios_base::showpos | std::ios_base::uppercase;
    
    // Act
    std::ios_base::fmtflags old_flags = stream.setf(new_flags, new_flags);
    
    // Assert
    EXPECT_EQ(old_flags, initial_flags);
    EXPECT_TRUE(stream.flags() & std::ios_base::showpos);
    EXPECT_TRUE(stream.flags() & std::ios_base::uppercase);
}

// Test Suite: Mask Functionality Tests
TEST_F(IosBaseSetfTest, SetFlagWithMask_OnlyMaskedBitsAffected) {
    // Arrange
    stream.setf(std::ios_base::showpos | std::ios_base::showpoint);
    std::ios_base::fmtflags initial_flags = stream.flags();
    
    // Act - Only change basefield, leave other flags unchanged
    std::ios_base::fmtflags old_flags = stream.setf(std::ios_base::oct, std::ios_base::basefield);
    
    // Assert
    EXPECT_EQ(old_flags, initial_flags);
    EXPECT_TRUE(stream.flags() & std::ios_base::oct);
    EXPECT_TRUE(stream.flags() & std::ios_base::showpos);  // Should remain set
    EXPECT_TRUE(stream.flags() & std::ios_base::showpoint); // Should remain set
}

TEST_F(IosBaseSetfTest, SetFlagWithRestrictiveMask_OnlySpecifiedBitsSet) {
    // Arrange
    std::ios_base::fmtflags broad_flags = std::ios_base::hex | std::ios_base::showpos | std::ios_base::uppercase;
    std::ios_base::fmtflags restrictive_mask = std::ios_base::basefield;
    
    // Act
    stream.setf(broad_flags, restrictive_mask);
    
    // Assert
    EXPECT_TRUE(stream.flags() & std::ios_base::hex);
    EXPECT_FALSE(stream.flags() & std::ios_base::showpos);  // Not in mask, should not be set
    EXPECT_FALSE(stream.flags() & std::ios_base::uppercase); // Not in mask, should not be set
}

// Test Suite: Edge Cases
TEST_F(IosBaseSetfTest, SetZeroFlags_ClearsMaskedBits) {
    // Arrange
    stream.setf(std::ios_base::hex | std::ios_base::showpos);
    std::ios_base::fmtflags initial_flags = stream.flags();
    
    // Act - Set zero flags with basefield mask (should clear basefield bits)
    std::ios_base::fmtflags old_flags = stream.setf(0, std::ios_base::basefield);
    
    // Assert
    EXPECT_EQ(old_flags, initial_flags);
    EXPECT_FALSE(stream.flags() & std::ios_base::hex);
    EXPECT_TRUE(stream.flags() & std::ios_base::showpos);  // Should remain unchanged
}

// Test Suite: Negative Cases
TEST_F(IosBaseSetfTest, SetFlagsWithZeroMask_NoChange) {
    // Arrange
    std::ios_base::fmtflags initial_flags = stream.flags();
    
    // Act - Zero mask should result in no changes
    std::ios_base::fmtflags old_flags = stream.setf(std::ios_base::hex | std::ios_base::showpos, 0);
    
    // Assert
    EXPECT_EQ(old_flags, initial_flags);
    EXPECT_EQ(stream.flags(), initial_flags); // Flags should remain unchanged
}

TEST_F(IosBaseSetfTest, SetInvalidFlagCombination_OnlyMaskedBitsAffected) {
    // Arrange
    std::ios_base::fmtflags initial_flags = stream.flags();
    
    // Act - Try to set conflicting flags, but mask limits what actually gets set
    std::ios_base::fmtflags old_flags = stream.setf(
        std::ios_base::hex | std::ios_base::dec | std::ios_base::oct, 
        std::ios_base::basefield
    );
    
    // Assert
    EXPECT_EQ(old_flags, initial_flags);
    // Only the bits specified in the mask should be affected
    // The actual result depends on the bit patterns, but it should be consistent
    EXPECT_TRUE((stream.flags() & std::ios_base::basefield) != 0);
}

// Test Suite: Boundary Conditions
TEST_F(IosBaseSetfTest, SetAllPossibleFlags_WithFullMask) {
    // Arrange
    std::ios_base::fmtflags initial_flags = stream.flags();
    std::ios_base::fmtflags all_flags = ~std::ios_base::fmtflags(0);
    
    // Act
    std::ios_base::fmtflags old_flags = stream.setf(all_flags, all_flags);
    
    // Assert
    EXPECT_EQ(old_flags, initial_flags);
    EXPECT_EQ(stream.flags(), all_flags);
}

TEST_F(IosBaseSetfTest, ConsecutiveSetfCalls_EachReturnsCorrectOldFlags) {
    // Arrange
    std::ios_base::fmtflags initial_flags = stream.flags();
    
    // Act & Assert - Chain of setf calls
    std::ios_base::fmtflags old1 = stream.setf(std::ios_base::hex, std::ios_base::basefield);
    EXPECT_EQ(old1, initial_flags);
    
    std::ios_base::fmtflags flags_after_first = stream.flags();
    std::ios_base::fmtflags old2 = stream.setf(std::ios_base::showpos);
    EXPECT_EQ(old2, flags_after_first);
    
    std::ios_base::fmtflags flags_after_second = stream.flags();
    std::ios_base::fmtflags old3 = stream.setf(std::ios_base::oct, std::ios_base::basefield);
    EXPECT_EQ(old3, flags_after_second);
}

// Main function to run all tests
int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
