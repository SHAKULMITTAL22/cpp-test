// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <iostream>
#include <locale>
#include <cassert>
#include <cmath>

// Test fixture class for ios_base::_M_getloc() tests
class IosBaseGetlocTest : public ::testing::Test {
protected:
    void SetUp() override {
        // Set up test environment before each test
    }

    void TearDown() override {
        // Clean up after each test
    }

    // Helper class to access protected _M_getloc method
    class TestableIosBase : public std::ios_base {
    public:
        // Expose the protected _M_getloc method for testing
        const std::locale& getTestLoc() const {
            return _M_getloc();
        }
        
        // Helper method to set locale for testing
        void setTestLocale(const std::locale& loc) {
            imbue(loc);
        }
    };
};

// Test Suite: Basic Functionality Tests
TEST_F(IosBaseGetlocTest, ReturnsDefaultLocaleWhenNotSet) {
    // Test that _M_getloc returns the default locale when no custom locale is set
    TestableIosBase ios_obj;
    const std::locale& returned_locale = ios_obj.getTestLoc();
    
    EXPECT_EQ(returned_locale.name(), std::locale().name());
}

TEST_F(IosBaseGetlocTest, ReturnsCorrectLocaleAfterImbue) {
    // Test that _M_getloc returns the correct locale after imbuing a custom locale
    TestableIosBase ios_obj;
    std::locale custom_locale("C");
    
    ios_obj.setTestLocale(custom_locale);
    const std::locale& returned_locale = ios_obj.getTestLoc();
    
    EXPECT_EQ(returned_locale.name(), custom_locale.name());
}

// Test Suite: Const Correctness Tests
TEST_F(IosBaseGetlocTest, ConstObjectReturnsLocale) {
    // Test that _M_getloc can be called on const objects
    const TestableIosBase const_ios_obj;
    const std::locale& returned_locale = const_ios_obj.getTestLoc();
    
    EXPECT_EQ(returned_locale.name(), std::locale().name());
}

TEST_F(IosBaseGetlocTest, ReturnsConstReferenceToLocale) {
    // Test that _M_getloc returns a const reference (not a copy)
    TestableIosBase ios_obj;
    const std::locale& returned_locale1 = ios_obj.getTestLoc();
    const std::locale& returned_locale2 = ios_obj.getTestLoc();
    
    // Both references should point to the same object
    EXPECT_EQ(&returned_locale1, &returned_locale2);
}

// Test Suite: Multiple Locale Changes
TEST_F(IosBaseGetlocTest, HandlesMultipleLocaleChanges) {
    // Test that _M_getloc correctly reflects multiple locale changes
    TestableIosBase ios_obj;
    
    // Set first locale
    std::locale first_locale("C");
    ios_obj.setTestLocale(first_locale);
    EXPECT_EQ(ios_obj.getTestLoc().name(), first_locale.name());
    
    // Set second locale
    try {
        std::locale second_locale("en_US.UTF-8");
        ios_obj.setTestLocale(second_locale);
        EXPECT_EQ(ios_obj.getTestLoc().name(), second_locale.name());
    } catch (const std::runtime_error&) {
        // If locale is not available, use classic locale
        std::locale classic_locale = std::locale::classic();
        ios_obj.setTestLocale(classic_locale);
        EXPECT_EQ(ios_obj.getTestLoc().name(), classic_locale.name());
    }
}

// Test Suite: Edge Cases
TEST_F(IosBaseGetlocTest, HandlesClassicLocale) {
    // Edge case: Test with classic "C" locale
    TestableIosBase ios_obj;
    std::locale classic_locale = std::locale::classic();
    
    ios_obj.setTestLocale(classic_locale);
    const std::locale& returned_locale = ios_obj.getTestLoc();
    
    EXPECT_EQ(returned_locale.name(), classic_locale.name());
}

// Test Suite: Object Lifecycle Tests
TEST_F(IosBaseGetlocTest, LocalePersistsAcrossMethodCalls) {
    // Test that locale persists across multiple method calls
    TestableIosBase ios_obj;
    std::locale test_locale("C");
    
    ios_obj.setTestLocale(test_locale);
    
    // Call _M_getloc multiple times and verify consistency
    for (int i = 0; i < 5; ++i) {
        const std::locale& returned_locale = ios_obj.getTestLoc();
        EXPECT_EQ(returned_locale.name(), test_locale.name());
    }
}

TEST_F(IosBaseGetlocTest, IndependentObjectsHaveIndependentLocales) {
    // Test that different ios_base objects maintain independent locales
    TestableIosBase ios_obj1;
    TestableIosBase ios_obj2;
    
    std::locale locale1("C");
    ios_obj1.setTestLocale(locale1);
    
    // ios_obj2 should still have default locale
    EXPECT_EQ(ios_obj1.getTestLoc().name(), locale1.name());
    EXPECT_EQ(ios_obj2.getTestLoc().name(), std::locale().name());
}

// Main function to run all tests
int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
