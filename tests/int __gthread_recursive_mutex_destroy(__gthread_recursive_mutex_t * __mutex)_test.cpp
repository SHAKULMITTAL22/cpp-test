// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cassert>
#include <cmath>
#include <iostream>
#include <pthread.h>

// Mock implementation of __gthread_mutex_destroy for testing purposes
// In actual implementation, this would be provided by the threading library
extern "C" {
    int __gthread_mutex_destroy(pthread_mutex_t* mutex);
}

// Mock implementation that simulates different return values
static int mock_mutex_destroy_return_value = 0;
static pthread_mutex_t* mock_last_mutex_ptr = nullptr;

int __gthread_mutex_destroy(pthread_mutex_t* mutex) {
    mock_last_mutex_ptr = mutex;
    return mock_mutex_destroy_return_value;
}

// Function under test
static inline int
__gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t *__mutex)
{
    return __gthread_mutex_destroy(__mutex);
}

// Test Suite for __gthread_recursive_mutex_destroy function
class GThreadRecursiveMutexDestroyTest : public ::testing::Test {
protected:
    void SetUp() override {
        // Reset mock state before each test
        mock_mutex_destroy_return_value = 0;
        mock_last_mutex_ptr = nullptr;
        
        // Initialize test mutex
        pthread_mutex_init(&test_mutex, nullptr);
    }
    
    void TearDown() override {
        // Clean up after each test
        mock_last_mutex_ptr = nullptr;
    }
    
    __gthread_recursive_mutex_t test_mutex;
};

// Positive Test Cases
TEST_F(GThreadRecursiveMutexDestroyTest, DestroyValidMutex_ReturnsSuccess) {
    // Arrange
    mock_mutex_destroy_return_value = 0;
    
    // Act
    int result = __gthread_recursive_mutex_destroy(&test_mutex);
    
    // Assert
    EXPECT_EQ(result, 0);
    EXPECT_EQ(mock_last_mutex_ptr, &test_mutex);
}

TEST_F(GThreadRecursiveMutexDestroyTest, DestroyInitializedMutex_CallsUnderlyingFunction) {
    // Arrange
    mock_mutex_destroy_return_value = 0;
    
    // Act
    int result = __gthread_recursive_mutex_destroy(&test_mutex);
    
    // Assert
    EXPECT_EQ(result, 0);
    EXPECT_NE(mock_last_mutex_ptr, nullptr);
    EXPECT_EQ(mock_last_mutex_ptr, &test_mutex);
}

// Negative Test Cases
TEST_F(GThreadRecursiveMutexDestroyTest, DestroyMutex_UnderlyingFunctionFails_ReturnsError) {
    // Arrange
    mock_mutex_destroy_return_value = EBUSY; // Simulate mutex is busy
    
    // Act
    int result = __gthread_recursive_mutex_destroy(&test_mutex);
    
    // Assert
    EXPECT_EQ(result, EBUSY);
    EXPECT_EQ(mock_last_mutex_ptr, &test_mutex);
}

TEST_F(GThreadRecursiveMutexDestroyTest, DestroyMutex_UnderlyingFunctionReturnsInvalidError) {
    // Arrange
    mock_mutex_destroy_return_value = EINVAL; // Simulate invalid mutex
    
    // Act
    int result = __gthread_recursive_mutex_destroy(&test_mutex);
    
    // Assert
    EXPECT_EQ(result, EINVAL);
    EXPECT_EQ(mock_last_mutex_ptr, &test_mutex);
}

// Edge Case Test
TEST_F(GThreadRecursiveMutexDestroyTest, DestroyNullMutex_PassesNullToUnderlyingFunction) {
    // Arrange
    mock_mutex_destroy_return_value = EINVAL;
    
    // Act
    int result = __gthread_recursive_mutex_destroy(nullptr);
    
    // Assert
    EXPECT_EQ(result, EINVAL);
    EXPECT_EQ(mock_last_mutex_ptr, nullptr);
}

// Additional Test Suite for Error Code Propagation
class GThreadRecursiveMutexDestroyErrorPropagationTest : public ::testing::Test {
protected:
    void SetUp() override {
        mock_mutex_destroy_return_value = 0;
        mock_last_mutex_ptr = nullptr;
        pthread_mutex_init(&test_mutex, nullptr);
    }
    
    __gthread_recursive_mutex_t test_mutex;
};

TEST_F(GThreadRecursiveMutexDestroyErrorPropagationTest, PropagatesSuccessCode) {
    // Arrange
    mock_mutex_destroy_return_value = 0;
    
    // Act
    int result = __gthread_recursive_mutex_destroy(&test_mutex);
    
    // Assert
    EXPECT_EQ(result, 0);
}

TEST_F(GThreadRecursiveMutexDestroyErrorPropagationTest, PropagatesCustomErrorCode) {
    // Arrange
    const int custom_error = 42;
    mock_mutex_destroy_return_value = custom_error;
    
    // Act
    int result = __gthread_recursive_mutex_destroy(&test_mutex);
    
    // Assert
    EXPECT_EQ(result, custom_error);
}

TEST_F(GThreadRecursiveMutexDestroyErrorPropagationTest, PropagatesNegativeErrorCode) {
    // Arrange
    mock_mutex_destroy_return_value = -1;
    
    // Act
    int result = __gthread_recursive_mutex_destroy(&test_mutex);
    
    // Assert
    EXPECT_EQ(result, -1);
}

// Main function to run all tests
int main(int argc, char** argv) {
    // Initialize Google Test framework
    ::testing::InitGoogleTest(&argc, argv);
    
    // Run all test cases
    return RUN_ALL_TESTS();
}
