// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __isgreaterequall function
class IsGreaterEqualLongDoubleTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsGreaterEqualLongDoubleTest, PositiveCase_GreaterValues) {
    EXPECT_EQ(__isgreaterequall(5.5L, 3.2L), 1);
    EXPECT_EQ(__isgreaterequall(100.0L, 50.0L), 1);
    EXPECT_EQ(__isgreaterequall(1.0L, 0.0L), 1);
}

TEST_F(IsGreaterEqualLongDoubleTest, PositiveCase_EqualValues) {
    EXPECT_EQ(__isgreaterequall(5.5L, 5.5L), 1);
    EXPECT_EQ(__isgreaterequall(0.0L, 0.0L), 1);
    EXPECT_EQ(__isgreaterequall(-3.14L, -3.14L), 1);
}

// Negative test cases
TEST_F(IsGreaterEqualLongDoubleTest, NegativeCase_SmallerValues) {
    EXPECT_EQ(__isgreaterequall(3.2L, 5.5L), 0);
    EXPECT_EQ(__isgreaterequall(-10.0L, -5.0L), 0);
    EXPECT_EQ(__isgreaterequall(0.0L, 1.0L), 0);
}

TEST_F(IsGreaterEqualLongDoubleTest, NegativeCase_NegativeComparisons) {
    EXPECT_EQ(__isgreaterequall(-100.0L, -50.0L), 0);
    EXPECT_EQ(__isgreaterequall(-5.5L, 3.2L), 0);
    EXPECT_EQ(__isgreaterequall(-1.0L, 0.0L), 0);
}

// Edge case tests
TEST_F(IsGreaterEqualLongDoubleTest, EdgeCase_InfinityValues) {
    long double pos_inf = std::numeric_limits<long double>::infinity();
    long double neg_inf = -std::numeric_limits<long double>::infinity();
    
    EXPECT_EQ(__isgreaterequall(pos_inf, 1000.0L), 1);
    EXPECT_EQ(__isgreaterequall(pos_inf, pos_inf), 1);
    EXPECT_EQ(__isgreaterequall(1000.0L, pos_inf), 0);
    EXPECT_EQ(__isgreaterequall(neg_inf, -1000.0L), 0);
    EXPECT_EQ(__isgreaterequall(neg_inf, neg_inf), 1);
}

TEST_F(IsGreaterEqualLongDoubleTest, EdgeCase_NaNValues) {
    long double nan_val = std::numeric_limits<long double>::quiet_NaN();
    
    // NaN comparisons should return 0 due to isunordered check
    EXPECT_EQ(__isgreaterequall(nan_val, 5.0L), 0);
    EXPECT_EQ(__isgreaterequall(5.0L, nan_val), 0);
    EXPECT_EQ(__isgreaterequall(nan_val, nan_val), 0);
}

TEST_F(IsGreaterEqualLongDoubleTest, EdgeCase_VerySmallValues) {
    long double epsilon = std::numeric_limits<long double>::epsilon();
    long double min_val = std::numeric_limits<long double>::min();
    
    EXPECT_EQ(__isgreaterequall(epsilon, 0.0L), 1);
    EXPECT_EQ(__isgreaterequall(min_val, 0.0L), 1);
    EXPECT_EQ(__isgreaterequall(0.0L, epsilon), 0);
    EXPECT_EQ(__isgreaterequall(min_val, min_val), 1);
}

TEST_F(IsGreaterEqualLongDoubleTest, EdgeCase_MaxValues) {
    long double max_val = std::numeric_limits<long double>::max();
    long double lowest_val = std::numeric_limits<long double>::lowest();
    
    EXPECT_EQ(__isgreaterequall(max_val, 1000.0L), 1);
    EXPECT_EQ(__isgreaterequall(max_val, max_val), 1);
    EXPECT_EQ(__isgreaterequall(1000.0L, max_val), 0);
    EXPECT_EQ(__isgreaterequall(lowest_val, -1000.0L), 0);
    EXPECT_EQ(__isgreaterequall(lowest_val, lowest_val), 1);
}

TEST_F(IsGreaterEqualLongDoubleTest, EdgeCase_ZeroComparisons) {
    long double pos_zero = +0.0L;
    long double neg_zero = -0.0L;
    
    EXPECT_EQ(__isgreaterequall(pos_zero, neg_zero), 1);
    EXPECT_EQ(__isgreaterequall(neg_zero, pos_zero), 1);
    EXPECT_EQ(__isgreaterequall(pos_zero, pos_zero), 1);
    EXPECT_EQ(__isgreaterequall(neg_zero, neg_zero), 1);
}

// Additional boundary tests
TEST_F(IsGreaterEqualLongDoubleTest, BoundaryCase_PrecisionLimits) {
    long double val1 = 1.0L;
    long double val2 = 1.0L + std::numeric_limits<long double>::epsilon();
    
    EXPECT_EQ(__isgreaterequall(val2, val1), 1);
    EXPECT_EQ(__isgreaterequall(val1, val2), 0);
}

TEST_F(IsGreaterEqualLongDoubleTest, BoundaryCase_SubnormalNumbers) {
    long double denorm_min = std::numeric_limits<long double>::denorm_min();
    
    EXPECT_EQ(__isgreaterequall(denorm_min, 0.0L), 1);
    EXPECT_EQ(__isgreaterequall(0.0L, denorm_min), 0);
    EXPECT_EQ(__isgreaterequall(denorm_min, denorm_min), 1);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
