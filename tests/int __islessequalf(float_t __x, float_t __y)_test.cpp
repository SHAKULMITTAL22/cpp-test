// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __islessequalf function
class IsLessEqualFloatTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsLessEqualFloatTest, PositiveCase_LessThan) {
    float_t x = 2.5f;
    float_t y = 3.7f;
    EXPECT_EQ(__islessequalf(x, y), 1);
}

TEST_F(IsLessEqualFloatTest, PositiveCase_Equal) {
    float_t x = 5.0f;
    float_t y = 5.0f;
    EXPECT_EQ(__islessequalf(x, y), 1);
}

TEST_F(IsLessEqualFloatTest, PositiveCase_ZeroValues) {
    float_t x = 0.0f;
    float_t y = 0.0f;
    EXPECT_EQ(__islessequalf(x, y), 1);
}

TEST_F(IsLessEqualFloatTest, PositiveCase_NegativeNumbers) {
    float_t x = -10.5f;
    float_t y = -3.2f;
    EXPECT_EQ(__islessequalf(x, y), 1);
}

// Negative test cases
TEST_F(IsLessEqualFloatTest, NegativeCase_GreaterThan) {
    float_t x = 8.9f;
    float_t y = 4.1f;
    EXPECT_EQ(__islessequalf(x, y), 0);
}

TEST_F(IsLessEqualFloatTest, NegativeCase_LargePositiveNumbers) {
    float_t x = 1000.0f;
    float_t y = 999.9f;
    EXPECT_EQ(__islessequalf(x, y), 0);
}

TEST_F(IsLessEqualFloatTest, NegativeCase_NegativeToPositive) {
    float_t x = 1.0f;
    float_t y = -1.0f;
    EXPECT_EQ(__islessequalf(x, y), 0);
}

// Edge cases
TEST_F(IsLessEqualFloatTest, EdgeCase_MaxFloatValues) {
    float_t x = std::numeric_limits<float>::max();
    float_t y = std::numeric_limits<float>::max();
    EXPECT_EQ(__islessequalf(x, y), 1);
}

TEST_F(IsLessEqualFloatTest, EdgeCase_MinFloatValues) {
    float_t x = std::numeric_limits<float>::lowest();
    float_t y = std::numeric_limits<float>::lowest();
    EXPECT_EQ(__islessequalf(x, y), 1);
}

TEST_F(IsLessEqualFloatTest, EdgeCase_InfinityValues) {
    float_t x = std::numeric_limits<float>::infinity();
    float_t y = std::numeric_limits<float>::infinity();
    EXPECT_EQ(__islessequalf(x, y), 1);
}

TEST_F(IsLessEqualFloatTest, EdgeCase_NegativeInfinityToPositiveInfinity) {
    float_t x = -std::numeric_limits<float>::infinity();
    float_t y = std::numeric_limits<float>::infinity();
    EXPECT_EQ(__islessequalf(x, y), 1);
}

TEST_F(IsLessEqualFloatTest, EdgeCase_NaNValues) {
    float_t x = std::numeric_limits<float>::quiet_NaN();
    float_t y = 5.0f;
    EXPECT_EQ(__islessequalf(x, y), 0);
}

TEST_F(IsLessEqualFloatTest, EdgeCase_BothNaNValues) {
    float_t x = std::numeric_limits<float>::quiet_NaN();
    float_t y = std::numeric_limits<float>::quiet_NaN();
    EXPECT_EQ(__islessequalf(x, y), 0);
}

TEST_F(IsLessEqualFloatTest, EdgeCase_VerySmallNumbers) {
    float_t x = std::numeric_limits<float>::epsilon();
    float_t y = std::numeric_limits<float>::epsilon() * 2.0f;
    EXPECT_EQ(__islessequalf(x, y), 1);
}

TEST_F(IsLessEqualFloatTest, EdgeCase_ZeroToNegativeZero) {
    float_t x = 0.0f;
    float_t y = -0.0f;
    EXPECT_EQ(__islessequalf(x, y), 1);
}

TEST_F(IsLessEqualFloatTest, EdgeCase_NormalToSubnormal) {
    float_t x = std::numeric_limits<float>::min();
    float_t y = std::numeric_limits<float>::denorm_min();
    EXPECT_EQ(__islessequalf(y, x), 1);
}

// Additional boundary tests
TEST_F(IsLessEqualFloatTest, BoundaryCase_MaxToInfinity) {
    float_t x = std::numeric_limits<float>::max();
    float_t y = std::numeric_limits<float>::infinity();
    EXPECT_EQ(__islessequalf(x, y), 1);
}

TEST_F(IsLessEqualFloatTest, BoundaryCase_InfinityToMax) {
    float_t x = std::numeric_limits<float>::infinity();
    float_t y = std::numeric_limits<float>::max();
    EXPECT_EQ(__islessequalf(x, y), 0);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
