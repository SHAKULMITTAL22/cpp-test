// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __islessequall function
class IsLessEqualLongDoubleTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsLessEqualLongDoubleTest, PositiveCase_FirstLessThanSecond) {
    long double x = 5.5L;
    long double y = 10.5L;
    EXPECT_EQ(__islessequall(x, y), 1);
}

TEST_F(IsLessEqualLongDoubleTest, PositiveCase_EqualValues) {
    long double x = 7.25L;
    long double y = 7.25L;
    EXPECT_EQ(__islessequall(x, y), 1);
}

TEST_F(IsLessEqualLongDoubleTest, PositiveCase_NegativeNumbers) {
    long double x = -15.75L;
    long double y = -10.25L;
    EXPECT_EQ(__islessequall(x, y), 1);
}

TEST_F(IsLessEqualLongDoubleTest, PositiveCase_ZeroComparison) {
    long double x = -0.0L;
    long double y = 0.0L;
    EXPECT_EQ(__islessequall(x, y), 1);
}

// Negative test cases
TEST_F(IsLessEqualLongDoubleTest, NegativeCase_FirstGreaterThanSecond) {
    long double x = 15.5L;
    long double y = 10.25L;
    EXPECT_EQ(__islessequall(x, y), 0);
}

TEST_F(IsLessEqualLongDoubleTest, NegativeCase_PositiveGreaterThanNegative) {
    long double x = 5.0L;
    long double y = -3.0L;
    EXPECT_EQ(__islessequall(x, y), 0);
}

TEST_F(IsLessEqualLongDoubleTest, NegativeCase_LargePositiveNumbers) {
    long double x = 1000000.0L;
    long double y = 999999.0L;
    EXPECT_EQ(__islessequall(x, y), 0);
}

// Edge cases with special values
TEST_F(IsLessEqualLongDoubleTest, EdgeCase_InfinityComparisons) {
    long double pos_inf = std::numeric_limits<long double>::infinity();
    long double neg_inf = -std::numeric_limits<long double>::infinity();
    long double finite_val = 100.0L;
    
    EXPECT_EQ(__islessequall(neg_inf, finite_val), 1);
    EXPECT_EQ(__islessequall(finite_val, pos_inf), 1);
    EXPECT_EQ(__islessequall(pos_inf, pos_inf), 1);
    EXPECT_EQ(__islessequall(pos_inf, finite_val), 0);
}

TEST_F(IsLessEqualLongDoubleTest, EdgeCase_NaNComparisons) {
    long double nan_val = std::numeric_limits<long double>::quiet_NaN();
    long double finite_val = 42.0L;
    long double pos_inf = std::numeric_limits<long double>::infinity();
    
    // NaN comparisons should return false (0) due to isunordered check
    EXPECT_EQ(__islessequall(nan_val, finite_val), 0);
    EXPECT_EQ(__islessequall(finite_val, nan_val), 0);
    EXPECT_EQ(__islessequall(nan_val, nan_val), 0);
    EXPECT_EQ(__islessequall(nan_val, pos_inf), 0);
}

TEST_F(IsLessEqualLongDoubleTest, EdgeCase_VerySmallNumbers) {
    long double epsilon = std::numeric_limits<long double>::epsilon();
    long double min_val = std::numeric_limits<long double>::min();
    
    EXPECT_EQ(__islessequall(min_val, epsilon), 1);
    EXPECT_EQ(__islessequall(epsilon, min_val), 0);
}

TEST_F(IsLessEqualLongDoubleTest, EdgeCase_MaximumValues) {
    long double max_val = std::numeric_limits<long double>::max();
    long double large_val = max_val / 2.0L;
    
    EXPECT_EQ(__islessequall(large_val, max_val), 1);
    EXPECT_EQ(__islessequall(max_val, large_val), 0);
    EXPECT_EQ(__islessequall(max_val, max_val), 1);
}

TEST_F(IsLessEqualLongDoubleTest, EdgeCase_DenormalizedNumbers) {
    long double denorm = std::numeric_limits<long double>::denorm_min();
    long double zero = 0.0L;
    
    EXPECT_EQ(__islessequall(zero, denorm), 1);
    EXPECT_EQ(__islessequall(denorm, zero), 0);
}

// Boundary value tests
TEST_F(IsLessEqualLongDoubleTest, BoundaryCase_NearZeroValues) {
    long double very_small_pos = 1e-100L;
    long double very_small_neg = -1e-100L;
    long double zero = 0.0L;
    
    EXPECT_EQ(__islessequall(very_small_neg, zero), 1);
    EXPECT_EQ(__islessequall(zero, very_small_pos), 1);
    EXPECT_EQ(__islessequall(very_small_neg, very_small_pos), 1);
}

TEST_F(IsLessEqualLongDoubleTest, BoundaryCase_PrecisionLimits) {
    long double base = 1.0L;
    long double slightly_larger = base + std::numeric_limits<long double>::epsilon();
    
    EXPECT_EQ(__islessequall(base, slightly_larger), 1);
    EXPECT_EQ(__islessequall(slightly_larger, base), 0);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
