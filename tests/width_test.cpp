// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <iostream>
#include <sstream>
#include <limits>

// Test fixture for ios_base width function tests
class IosBaseWidthTest : public ::testing::Test {
protected:
    void SetUp() override {
        // Reset stream state before each test
        test_stream.width(0);
    }
    
    std::ostringstream test_stream;
};

// Test Suite: Basic Width Functionality
TEST_F(IosBaseWidthTest, SetWidthReturnsOldValue_PositiveCase1) {
    // Set initial width to 5
    test_stream.width(5);
    
    // Set new width to 10 and verify old value is returned
    std::streamsize old_width = test_stream.width(10);
    
    EXPECT_EQ(old_width, 5);
    EXPECT_EQ(test_stream.width(), 10);
}

TEST_F(IosBaseWidthTest, SetWidthReturnsOldValue_PositiveCase2) {
    // Set initial width to 15
    test_stream.width(15);
    
    // Set new width to 25 and verify old value is returned
    std::streamsize old_width = test_stream.width(25);
    
    EXPECT_EQ(old_width, 15);
    EXPECT_EQ(test_stream.width(), 25);
}

// Test Suite: Zero and Default Width Handling
TEST_F(IosBaseWidthTest, SetZeroWidth_ReturnsOldValue) {
    // Set initial width to 8
    test_stream.width(8);
    
    // Set width to 0 and verify old value is returned
    std::streamsize old_width = test_stream.width(0);
    
    EXPECT_EQ(old_width, 8);
    EXPECT_EQ(test_stream.width(), 0);
}

TEST_F(IosBaseWidthTest, DefaultWidthIsZero) {
    // Verify default width is 0
    std::streamsize current_width = test_stream.width();
    EXPECT_EQ(current_width, 0);
    
    // Set width and verify old value was 0
    std::streamsize old_width = test_stream.width(5);
    EXPECT_EQ(old_width, 0);
}

// Test Suite: Negative Width Values
TEST_F(IosBaseWidthTest, SetNegativeWidth_NegativeCase1) {
    // Set initial width to 10
    test_stream.width(10);
    
    // Set negative width and verify behavior
    std::streamsize old_width = test_stream.width(-5);
    
    EXPECT_EQ(old_width, 10);
    EXPECT_EQ(test_stream.width(), -5);
}

TEST_F(IosBaseWidthTest, SetNegativeWidth_NegativeCase2) {
    // Set initial width to 3
    test_stream.width(3);
    
    // Set large negative width
    std::streamsize old_width = test_stream.width(-100);
    
    EXPECT_EQ(old_width, 3);
    EXPECT_EQ(test_stream.width(), -100);
}

// Test Suite: Edge Cases
TEST_F(IosBaseWidthTest, MaxStreamSizeWidth_EdgeCase) {
    // Test with maximum streamsize value
    std::streamsize max_width = std::numeric_limits<std::streamsize>::max();
    
    // Set initial width
    test_stream.width(42);
    
    // Set maximum width value
    std::streamsize old_width = test_stream.width(max_width);
    
    EXPECT_EQ(old_width, 42);
    EXPECT_EQ(test_stream.width(), max_width);
}

// Test Suite: Multiple Consecutive Width Changes
TEST_F(IosBaseWidthTest, ConsecutiveWidthChanges) {
    std::streamsize width1 = test_stream.width(10);
    EXPECT_EQ(width1, 0);  // Initial width should be 0
    
    std::streamsize width2 = test_stream.width(20);
    EXPECT_EQ(width2, 10);
    
    std::streamsize width3 = test_stream.width(30);
    EXPECT_EQ(width3, 20);
    
    EXPECT_EQ(test_stream.width(), 30);
}

// Test Suite: Width Persistence
TEST_F(IosBaseWidthTest, WidthPersistsUntilChanged) {
    // Set width and verify it persists
    test_stream.width(7);
    
    // Check width multiple times
    EXPECT_EQ(test_stream.width(), 7);
    
    // Width should remain the same after checking
    std::streamsize current_width = test_stream.width();
    EXPECT_EQ(current_width, 7);
}

// Test Suite: Different Stream Types
TEST(IosBaseWidthGlobalTest, DifferentStreamTypes) {
    std::istringstream input_stream;
    std::ostringstream output_stream;
    
    // Test width functionality on different stream types
    std::streamsize old_input_width = input_stream.width(12);
    std::streamsize old_output_width = output_stream.width(15);
    
    EXPECT_EQ(old_input_width, 0);
    EXPECT_EQ(old_output_width, 0);
    EXPECT_EQ(input_stream.width(), 12);
    EXPECT_EQ(output_stream.width(), 15);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
