// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __islessequal function
class IsLessEqualTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsLessEqualTest, PositiveCase_FirstLessThanSecond) {
    EXPECT_EQ(__islessequal(1.0, 2.0), 1);
    EXPECT_EQ(__islessequal(-5.5, -3.2), 1);
    EXPECT_EQ(__islessequal(0.0, 1.0), 1);
}

TEST_F(IsLessEqualTest, PositiveCase_EqualValues) {
    EXPECT_EQ(__islessequal(5.0, 5.0), 1);
    EXPECT_EQ(__islessequal(-3.14, -3.14), 1);
    EXPECT_EQ(__islessequal(0.0, 0.0), 1);
}

// Negative test cases
TEST_F(IsLessEqualTest, NegativeCase_FirstGreaterThanSecond) {
    EXPECT_EQ(__islessequal(10.0, 5.0), 0);
    EXPECT_EQ(__islessequal(2.5, 1.8), 0);
    EXPECT_EQ(__islessequal(-1.0, -5.0), 0);
}

TEST_F(IsLessEqualTest, NegativeCase_WithNaN) {
    double nan_val = std::numeric_limits<double>::quiet_NaN();
    EXPECT_EQ(__islessequal(nan_val, 5.0), 0);
    EXPECT_EQ(__islessequal(5.0, nan_val), 0);
    EXPECT_EQ(__islessequal(nan_val, nan_val), 0);
}

// Edge case tests
TEST_F(IsLessEqualTest, EdgeCase_InfinityValues) {
    double pos_inf = std::numeric_limits<double>::infinity();
    double neg_inf = -std::numeric_limits<double>::infinity();
    
    EXPECT_EQ(__islessequal(neg_inf, pos_inf), 1);
    EXPECT_EQ(__islessequal(pos_inf, pos_inf), 1);
    EXPECT_EQ(__islessequal(neg_inf, neg_inf), 1);
    EXPECT_EQ(__islessequal(pos_inf, neg_inf), 0);
    EXPECT_EQ(__islessequal(5.0, pos_inf), 1);
    EXPECT_EQ(__islessequal(neg_inf, 5.0), 1);
}

TEST_F(IsLessEqualTest, EdgeCase_ZeroValues) {
    double pos_zero = 0.0;
    double neg_zero = -0.0;
    
    EXPECT_EQ(__islessequal(pos_zero, neg_zero), 1);
    EXPECT_EQ(__islessequal(neg_zero, pos_zero), 1);
    EXPECT_EQ(__islessequal(pos_zero, pos_zero), 1);
    EXPECT_EQ(__islessequal(neg_zero, neg_zero), 1);
}

TEST_F(IsLessEqualTest, EdgeCase_VerySmallNumbers) {
    double epsilon = std::numeric_limits<double>::epsilon();
    double min_val = std::numeric_limits<double>::min();
    
    EXPECT_EQ(__islessequal(min_val, epsilon), 1);
    EXPECT_EQ(__islessequal(epsilon, min_val), 0);
    EXPECT_EQ(__islessequal(min_val, min_val), 1);
}

TEST_F(IsLessEqualTest, EdgeCase_VeryLargeNumbers) {
    double max_val = std::numeric_limits<double>::max();
    double large_val = max_val / 2.0;
    
    EXPECT_EQ(__islessequal(large_val, max_val), 1);
    EXPECT_EQ(__islessequal(max_val, large_val), 0);
    EXPECT_EQ(__islessequal(max_val, max_val), 1);
}

TEST_F(IsLessEqualTest, EdgeCase_SubnormalNumbers) {
    double denorm_min = std::numeric_limits<double>::denorm_min();
    double min_val = std::numeric_limits<double>::min();
    
    EXPECT_EQ(__islessequal(denorm_min, min_val), 1);
    EXPECT_EQ(__islessequal(denorm_min, denorm_min), 1);
    EXPECT_EQ(__islessequal(min_val, denorm_min), 0);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
