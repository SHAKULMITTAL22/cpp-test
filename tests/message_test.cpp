// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <system_error>
#include <string>

// Test suite for std::error_condition class
class ErrorConditionTest : public ::testing::Test {
protected:
    void SetUp() override {
        // Setup common test data if needed
    }

    void TearDown() override {
        // Cleanup after each test
    }
};

// Test suite for default constructor
TEST_F(ErrorConditionTest, DefaultConstructor_CreatesValidObject) {
    std::error_condition ec;
    
    EXPECT_EQ(ec.value(), 0);
    EXPECT_EQ(ec.category(), std::generic_category());
    EXPECT_FALSE(static_cast<bool>(ec));
}

TEST_F(ErrorConditionTest, DefaultConstructor_MessageIsEmpty) {
    std::error_condition ec;
    
    EXPECT_FALSE(ec.message().empty());
    EXPECT_EQ(ec.message(), "Success");
}

// Test suite for value and category constructor
TEST_F(ErrorConditionTest, ValueCategoryConstructor_ValidParameters_CreatesCorrectObject) {
    std::error_condition ec(ENOENT, std::generic_category());
    
    EXPECT_EQ(ec.value(), ENOENT);
    EXPECT_EQ(ec.category(), std::generic_category());
    EXPECT_TRUE(static_cast<bool>(ec));
}

TEST_F(ErrorConditionTest, ValueCategoryConstructor_ZeroValue_CreatesNoErrorCondition) {
    std::error_condition ec(0, std::system_category());
    
    EXPECT_EQ(ec.value(), 0);
    EXPECT_EQ(ec.category(), std::system_category());
    EXPECT_FALSE(static_cast<bool>(ec));
}

// Test suite for error code enum constructor
TEST_F(ErrorConditionTest, ErrorCodeEnumConstructor_ValidEnum_CreatesCorrectObject) {
    std::error_condition ec(std::errc::no_such_file_or_directory);
    
    EXPECT_EQ(ec.value(), static_cast<int>(std::errc::no_such_file_or_directory));
    EXPECT_EQ(ec.category(), std::generic_category());
    EXPECT_TRUE(static_cast<bool>(ec));
}

TEST_F(ErrorConditionTest, ErrorCodeEnumConstructor_NoError_CreatesNoErrorCondition) {
    std::error_condition ec(static_cast<std::errc>(0));
    
    EXPECT_EQ(ec.value(), 0);
    EXPECT_FALSE(static_cast<bool>(ec));
}

// Test suite for copy constructor
TEST_F(ErrorConditionTest, CopyConstructor_ValidObject_CreatesIdenticalCopy) {
    std::error_condition original(EINVAL, std::generic_category());
    std::error_condition copy(original);
    
    EXPECT_EQ(copy.value(), original.value());
    EXPECT_EQ(copy.category(), original.category());
    EXPECT_EQ(copy.message(), original.message());
}

TEST_F(ErrorConditionTest, CopyConstructor_DefaultObject_CreatesIdenticalCopy) {
    std::error_condition original;
    std::error_condition copy(original);
    
    EXPECT_EQ(copy.value(), original.value());
    EXPECT_EQ(copy.category(), original.category());
    EXPECT_FALSE(static_cast<bool>(copy));
}

// Test suite for assignment operator
TEST_F(ErrorConditionTest, AssignmentOperator_ValidObject_AssignsCorrectly) {
    std::error_condition ec1(EACCES, std::generic_category());
    std::error_condition ec2;
    
    ec2 = ec1;
    
    EXPECT_EQ(ec2.value(), ec1.value());
    EXPECT_EQ(ec2.category(), ec1.category());
    EXPECT_TRUE(static_cast<bool>(ec2));
}

TEST_F(ErrorConditionTest, AssignmentOperator_SelfAssignment_RemainsUnchanged) {
    std::error_condition ec(EPERM, std::generic_category());
    int original_value = ec.value();
    
    ec = ec;  // Self assignment
    
    EXPECT_EQ(ec.value(), original_value);
    EXPECT_EQ(ec.category(), std::generic_category());
}

// Test suite for assign method
TEST_F(ErrorConditionTest, AssignMethod_ValidParameters_AssignsCorrectly) {
    std::error_condition ec;
    
    ec.assign(ENOENT, std::system_category());
    
    EXPECT_EQ(ec.value(), ENOENT);
    EXPECT_EQ(ec.category(), std::system_category());
    EXPECT_TRUE(static_cast<bool>(ec));
}

TEST_F(ErrorConditionTest, AssignMethod_ZeroValue_CreatesNoErrorCondition) {
    std::error_condition ec(EINVAL, std::generic_category());
    
    ec.assign(0, std::generic_category());
    
    EXPECT_EQ(ec.value(), 0);
    EXPECT_FALSE(static_cast<bool>(ec));
}

// Test suite for clear method
TEST_F(ErrorConditionTest, ClearMethod_ErrorCondition_ResetsToDefault) {
    std::error_condition ec(EACCES, std::system_category());
    
    ec.clear();
    
    EXPECT_EQ(ec.value(), 0);
    EXPECT_EQ(ec.category(), std::generic_category());
    EXPECT_FALSE(static_cast<bool>(ec));
}

TEST_F(ErrorConditionTest, ClearMethod_AlreadyCleared_RemainsCleared) {
    std::error_condition ec;
    
    ec.clear();
    
    EXPECT_EQ(ec.value(), 0);
    EXPECT_EQ(ec.category(), std::generic_category());
    EXPECT_FALSE(static_cast<bool>(ec));
}

// Test suite for value method
TEST_F(ErrorConditionTest, ValueMethod_VariousValues_ReturnsCorrectValue) {
    std::error_condition ec1(42, std::generic_category());
    std::error_condition ec2(-1, std::system_category());
    
    EXPECT_EQ(ec1.value(), 42);
    EXPECT_EQ(ec2.value(), -1);
}

TEST_F(ErrorConditionTest, ValueMethod_EdgeCaseValues_ReturnsCorrectValue) {
    std::error_condition ec1(INT_MAX, std::generic_category());
    std::error_condition ec2(INT_MIN, std::generic_category());
    
    EXPECT_EQ(ec1.value(), INT_MAX);
    EXPECT_EQ(ec2.value(), INT_MIN);
}

// Test suite for category method
TEST_F(ErrorConditionTest, CategoryMethod_DifferentCategories_ReturnsCorrectCategory) {
    std::error_condition ec1(1, std::generic_category());
    std::error_condition ec2(1, std::system_category());
    
    EXPECT_EQ(ec1.category(), std::generic_category());
    EXPECT_EQ(ec2.category(), std::system_category());
}

TEST_F(ErrorConditionTest, CategoryMethod_SameCategory_ReturnsIdenticalReference) {
    std::error_condition ec1(1, std::generic_category());
    std::error_condition ec2(2, std::generic_category());
    
    EXPECT_EQ(&ec1.category(), &ec2.category());
}

// Test suite for message method
TEST_F(ErrorConditionTest, MessageMethod_ValidErrorCode_ReturnsNonEmptyMessage) {
    std::error_condition ec(ENOENT, std::generic_category());
    
    std::string message = ec.message();
    
    EXPECT_FALSE(message.empty());
    EXPECT_NE(message.find("No such file"), std::string::npos);
}

TEST_F(ErrorConditionTest, MessageMethod_InvalidErrorCode_ReturnsUnknownMessage) {
    std::error_condition ec(99999, std::generic_category());
    
    std::string message = ec.message();
    
    EXPECT_FALSE(message.empty());
    // Message should indicate unknown error
}

// Test suite for boolean conversion operator
TEST_F(ErrorConditionTest, BooleanConversion_NonZeroValue_ReturnsTrue) {
    std::error_condition ec(EINVAL, std::generic_category());
    
    EXPECT_TRUE(static_cast<bool>(ec));
    EXPECT_TRUE(ec);
}

TEST_F(ErrorConditionTest, BooleanConversion_ZeroValue_ReturnsFalse) {
    std::error_condition ec(0, std::generic_category());
    
    EXPECT_FALSE(static_cast<bool>(ec));
    EXPECT_FALSE(ec);
}

// Test suite for equality operators
TEST_F(ErrorConditionTest, EqualityOperator_IdenticalConditions_ReturnsTrue) {
    std::error_condition ec1(EACCES, std::generic_category());
    std::error_condition ec2(EACCES, std::generic_category());
    
    EXPECT_TRUE(ec1 == ec2);
    EXPECT_FALSE(ec1 != ec2);
}

TEST_F(ErrorConditionTest, EqualityOperator_DifferentValues_ReturnsFalse) {
    std::error_condition ec1(EACCES, std::generic_category());
    std::error_condition ec2(EINVAL, std::generic_category());
    
    EXPECT_FALSE(ec1 == ec2);
    EXPECT_TRUE(ec1 != ec2);
}

TEST_F(ErrorConditionTest, EqualityOperator_DifferentCategories_ReturnsFalse) {
    std::error_condition ec1(1, std::generic_category());
    std::error_condition ec2(1, std::system_category());
    
    EXPECT_FALSE(ec1 == ec2);
    EXPECT_TRUE(ec1 != ec2);
}

// Edge case tests
TEST_F(ErrorConditionTest, EdgeCase_MaxIntValue_HandledCorrectly) {
    std::error_condition ec(INT_MAX, std::generic_category());
    
    EXPECT_EQ(ec.value(), INT_MAX);
    EXPECT_TRUE(static_cast<bool>(ec));
    EXPECT_FALSE(ec.message().empty());
}

TEST_F(ErrorConditionTest, EdgeCase_MinIntValue_HandledCorrectly) {
    std::error_condition ec(INT_MIN, std::generic_category());
    
    EXPECT_EQ(ec.value(), INT_MIN);
    EXPECT_TRUE(static_cast<bool>(ec));
    EXPECT_FALSE(ec.message().empty());
}

// Main function to run all tests
int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
