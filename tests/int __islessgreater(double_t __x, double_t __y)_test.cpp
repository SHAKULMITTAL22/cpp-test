// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __islessgreater function
class IsLessGreaterTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsLessGreaterTest, PositiveNumbers_DifferentValues_ReturnsTrue) {
    EXPECT_EQ(1, __islessgreater(3.5, 7.2));
    EXPECT_EQ(1, __islessgreater(10.0, 5.0));
}

TEST_F(IsLessGreaterTest, NegativeNumbers_DifferentValues_ReturnsTrue) {
    EXPECT_EQ(1, __islessgreater(-2.5, -8.1));
    EXPECT_EQ(1, __islessgreater(-15.0, -3.0));
}

TEST_F(IsLessGreaterTest, MixedSignNumbers_DifferentValues_ReturnsTrue) {
    EXPECT_EQ(1, __islessgreater(-4.5, 2.3));
    EXPECT_EQ(1, __islessgreater(6.7, -1.8));
}

// Negative test cases
TEST_F(IsLessGreaterTest, EqualPositiveNumbers_ReturnsFalse) {
    EXPECT_EQ(0, __islessgreater(5.5, 5.5));
    EXPECT_EQ(0, __islessgreater(0.0, 0.0));
}

TEST_F(IsLessGreaterTest, EqualNegativeNumbers_ReturnsFalse) {
    EXPECT_EQ(0, __islessgreater(-3.7, -3.7));
    EXPECT_EQ(0, __islessgreater(-0.0, 0.0));
}

TEST_F(IsLessGreaterTest, BothNaN_ReturnsFalse) {
    double nan_val = std::numeric_limits<double>::quiet_NaN();
    EXPECT_EQ(0, __islessgreater(nan_val, nan_val));
}

// Edge cases
TEST_F(IsLessGreaterTest, OneNaN_ReturnsFalse) {
    double nan_val = std::numeric_limits<double>::quiet_NaN();
    EXPECT_EQ(0, __islessgreater(nan_val, 5.0));
    EXPECT_EQ(0, __islessgreater(3.14, nan_val));
}

TEST_F(IsLessGreaterTest, InfinityValues_ReturnsExpected) {
    double pos_inf = std::numeric_limits<double>::infinity();
    double neg_inf = -std::numeric_limits<double>::infinity();
    
    EXPECT_EQ(1, __islessgreater(pos_inf, neg_inf));
    EXPECT_EQ(1, __islessgreater(neg_inf, pos_inf));
    EXPECT_EQ(0, __islessgreater(pos_inf, pos_inf));
    EXPECT_EQ(0, __islessgreater(neg_inf, neg_inf));
}

TEST_F(IsLessGreaterTest, InfinityWithFiniteNumbers_ReturnsTrue) {
    double pos_inf = std::numeric_limits<double>::infinity();
    double neg_inf = -std::numeric_limits<double>::infinity();
    
    EXPECT_EQ(1, __islessgreater(pos_inf, 100.0));
    EXPECT_EQ(1, __islessgreater(-50.0, pos_inf));
    EXPECT_EQ(1, __islessgreater(neg_inf, 25.0));
    EXPECT_EQ(1, __islessgreater(75.0, neg_inf));
}

TEST_F(IsLessGreaterTest, VerySmallNumbers_ReturnsExpected) {
    double epsilon = std::numeric_limits<double>::epsilon();
    double min_val = std::numeric_limits<double>::min();
    
    EXPECT_EQ(1, __islessgreater(epsilon, min_val));
    EXPECT_EQ(1, __islessgreater(min_val, epsilon));
    EXPECT_EQ(0, __islessgreater(epsilon, epsilon));
}

TEST_F(IsLessGreaterTest, VeryLargeNumbers_ReturnsExpected) {
    double max_val = std::numeric_limits<double>::max();
    double large_val = max_val / 2.0;
    
    EXPECT_EQ(1, __islessgreater(max_val, large_val));
    EXPECT_EQ(1, __islessgreater(large_val, max_val));
    EXPECT_EQ(0, __islessgreater(max_val, max_val));
}

TEST_F(IsLessGreaterTest, ZeroComparisons_ReturnsExpected) {
    EXPECT_EQ(0, __islessgreater(0.0, -0.0));
    EXPECT_EQ(1, __islessgreater(0.0, 1.0));
    EXPECT_EQ(1, __islessgreater(0.0, -1.0));
    EXPECT_EQ(1, __islessgreater(1.0, 0.0));
    EXPECT_EQ(1, __islessgreater(-1.0, 0.0));
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
