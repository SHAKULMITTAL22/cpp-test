// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <system_error>
#include <string>
#include <iostream>
#include <cassert>
#include <cmath>

// Test suite for std::system_error constructor
class SystemErrorTest : public ::testing::Test {
protected:
    void SetUp() override {
        // Setup code if needed
    }

    void TearDown() override {
        // Cleanup code if needed
    }
};

// Positive test cases
TEST_F(SystemErrorTest, ConstructorWithValidErrorCodeAndMessage) {
    const int error_value = 22; // EINVAL
    const std::error_category& category = std::generic_category();
    const std::string what_message = "Invalid argument error";
    
    std::system_error se(error_value, category, what_message);
    
    EXPECT_EQ(se.code().value(), error_value);
    EXPECT_EQ(&se.code().category(), &category);
    
    std::string expected_message = what_message + ": " + std::error_code(error_value, category).message();
    EXPECT_EQ(std::string(se.what()), expected_message);
}

TEST_F(SystemErrorTest, ConstructorWithSystemCategoryAndCustomMessage) {
    const int error_value = 2; // ENOENT
    const std::error_category& category = std::system_category();
    const std::string what_message = "File operation failed";
    
    std::system_error se(error_value, category, what_message);
    
    EXPECT_EQ(se.code().value(), error_value);
    EXPECT_EQ(&se.code().category(), &category);
    
    std::string expected_message = what_message + ": " + std::error_code(error_value, category).message();
    EXPECT_EQ(std::string(se.what()), expected_message);
}

// Negative test cases
TEST_F(SystemErrorTest, ConstructorWithNegativeErrorValue) {
    const int error_value = -1;
    const std::error_category& category = std::generic_category();
    const std::string what_message = "Negative error code test";
    
    std::system_error se(error_value, category, what_message);
    
    EXPECT_EQ(se.code().value(), error_value);
    EXPECT_EQ(&se.code().category(), &category);
    
    std::string expected_message = what_message + ": " + std::error_code(error_value, category).message();
    EXPECT_EQ(std::string(se.what()), expected_message);
}

TEST_F(SystemErrorTest, ConstructorWithLargeErrorValue) {
    const int error_value = 999999;
    const std::error_category& category = std::generic_category();
    const std::string what_message = "Large error code test";
    
    std::system_error se(error_value, category, what_message);
    
    EXPECT_EQ(se.code().value(), error_value);
    EXPECT_EQ(&se.code().category(), &category);
    
    std::string expected_message = what_message + ": " + std::error_code(error_value, category).message();
    EXPECT_EQ(std::string(se.what()), expected_message);
}

// Edge case tests
TEST_F(SystemErrorTest, ConstructorWithEmptyMessage) {
    const int error_value = 1; // EPERM
    const std::error_category& category = std::generic_category();
    const std::string what_message = "";
    
    std::system_error se(error_value, category, what_message);
    
    EXPECT_EQ(se.code().value(), error_value);
    EXPECT_EQ(&se.code().category(), &category);
    
    std::string expected_message = what_message + ": " + std::error_code(error_value, category).message();
    EXPECT_EQ(std::string(se.what()), expected_message);
}

TEST_F(SystemErrorTest, ConstructorWithZeroErrorValue) {
    const int error_value = 0; // Success/No error
    const std::error_category& category = std::generic_category();
    const std::string what_message = "Zero error code test";
    
    std::system_error se(error_value, category, what_message);
    
    EXPECT_EQ(se.code().value(), error_value);
    EXPECT_EQ(&se.code().category(), &category);
    
    std::string expected_message = what_message + ": " + std::error_code(error_value, category).message();
    EXPECT_EQ(std::string(se.what()), expected_message);
}

TEST_F(SystemErrorTest, ConstructorWithVeryLongMessage) {
    const int error_value = 13; // EACCES
    const std::error_category& category = std::system_category();
    const std::string what_message = std::string(1000, 'A'); // Very long message
    
    std::system_error se(error_value, category, what_message);
    
    EXPECT_EQ(se.code().value(), error_value);
    EXPECT_EQ(&se.code().category(), &category);
    
    std::string expected_message = what_message + ": " + std::error_code(error_value, category).message();
    EXPECT_EQ(std::string(se.what()), expected_message);
}

// Test inheritance behavior
TEST_F(SystemErrorTest, InheritanceFromRuntimeError) {
    const int error_value = 5; // EIO
    const std::error_category& category = std::generic_category();
    const std::string what_message = "IO error occurred";
    
    std::system_error se(error_value, category, what_message);
    
    // Test that system_error can be caught as runtime_error
    try {
        throw se;
    } catch (const std::runtime_error& re) {
        std::string expected_message = what_message + ": " + std::error_code(error_value, category).message();
        EXPECT_EQ(std::string(re.what()), expected_message);
    } catch (...) {
        FAIL() << "system_error should be catchable as runtime_error";
    }
}

// Test with special characters in message
TEST_F(SystemErrorTest, ConstructorWithSpecialCharactersInMessage) {
    const int error_value = 9; // EBADF
    const std::error_category& category = std::generic_category();
    const std::string what_message = "Special chars: !@#$%^&*()_+-={}[]|\\:;\"'<>?,./";
    
    std::system_error se(error_value, category, what_message);
    
    EXPECT_EQ(se.code().value(), error_value);
    EXPECT_EQ(&se.code().category(), &category);
    
    std::string expected_message = what_message + ": " + std::error_code(error_value, category).message();
    EXPECT_EQ(std::string(se.what()), expected_message);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
