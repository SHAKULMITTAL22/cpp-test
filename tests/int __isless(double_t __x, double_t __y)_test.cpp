// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __isless function
class IsLessTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsLessTest, PositiveCase_FirstLessThanSecond) {
    // Test when first argument is clearly less than second
    EXPECT_EQ(__isless(1.0, 2.0), 1);
    EXPECT_EQ(__isless(-5.5, -2.3), 1);
    EXPECT_EQ(__isless(0.0, 1.0), 1);
    EXPECT_EQ(__isless(-10.0, 10.0), 1);
}

TEST_F(IsLessTest, PositiveCase_VerySmallDifferences) {
    // Test with very small differences between values
    double small_val = 1.0;
    double slightly_larger = 1.0 + std::numeric_limits<double>::epsilon();
    EXPECT_EQ(__isless(small_val, slightly_larger), 1);
    
    EXPECT_EQ(__isless(1.000001, 1.000002), 1);
}

// Negative test cases
TEST_F(IsLessTest, NegativeCase_FirstGreaterThanSecond) {
    // Test when first argument is greater than second
    EXPECT_EQ(__isless(5.0, 3.0), 0);
    EXPECT_EQ(__isless(0.0, -1.0), 0);
    EXPECT_EQ(__isless(100.5, 50.25), 0);
    EXPECT_EQ(__isless(-1.0, -5.0), 0);
}

TEST_F(IsLessTest, NegativeCase_EqualValues) {
    // Test when both arguments are equal
    EXPECT_EQ(__isless(5.0, 5.0), 0);
    EXPECT_EQ(__isless(0.0, 0.0), 0);
    EXPECT_EQ(__isless(-3.14, -3.14), 0);
    EXPECT_EQ(__isless(std::numeric_limits<double>::max(), 
                      std::numeric_limits<double>::max()), 0);
}

// Edge case tests
TEST_F(IsLessTest, EdgeCase_InfinityValues) {
    // Test with positive and negative infinity
    double pos_inf = std::numeric_limits<double>::infinity();
    double neg_inf = -std::numeric_limits<double>::infinity();
    
    EXPECT_EQ(__isless(neg_inf, pos_inf), 1);
    EXPECT_EQ(__isless(1.0, pos_inf), 1);
    EXPECT_EQ(__isless(neg_inf, 1.0), 1);
    EXPECT_EQ(__isless(pos_inf, 1.0), 0);
    EXPECT_EQ(__isless(1.0, neg_inf), 0);
    EXPECT_EQ(__isless(pos_inf, pos_inf), 0);
    EXPECT_EQ(__isless(neg_inf, neg_inf), 0);
}

TEST_F(IsLessTest, EdgeCase_NaNValues) {
    // Test with NaN values - should return 0 due to isunordered check
    double nan_val = std::numeric_limits<double>::quiet_NaN();
    
    EXPECT_EQ(__isless(nan_val, 1.0), 0);
    EXPECT_EQ(__isless(1.0, nan_val), 0);
    EXPECT_EQ(__isless(nan_val, nan_val), 0);
    EXPECT_EQ(__isless(nan_val, std::numeric_limits<double>::infinity()), 0);
}

TEST_F(IsLessTest, EdgeCase_ZeroValues) {
    // Test with positive and negative zero
    double pos_zero = 0.0;
    double neg_zero = -0.0;
    
    EXPECT_EQ(__isless(pos_zero, neg_zero), 0);
    EXPECT_EQ(__isless(neg_zero, pos_zero), 0);
    EXPECT_EQ(__isless(pos_zero, 1.0), 1);
    EXPECT_EQ(__isless(neg_zero, 1.0), 1);
    EXPECT_EQ(__isless(1.0, pos_zero), 0);
    EXPECT_EQ(__isless(1.0, neg_zero), 0);
}

TEST_F(IsLessTest, EdgeCase_ExtremeValues) {
    // Test with maximum and minimum representable values
    double max_val = std::numeric_limits<double>::max();
    double min_val = std::numeric_limits<double>::lowest();
    double denorm_min = std::numeric_limits<double>::denorm_min();
    
    EXPECT_EQ(__isless(min_val, max_val), 1);
    EXPECT_EQ(__isless(max_val, min_val), 0);
    EXPECT_EQ(__isless(denorm_min, 1.0), 1);
    EXPECT_EQ(__isless(1.0, denorm_min), 0);
}

TEST_F(IsLessTest, EdgeCase_SubnormalNumbers) {
    // Test with subnormal numbers
    double subnormal = std::numeric_limits<double>::denorm_min();
    double normal_small = std::numeric_limits<double>::min();
    
    EXPECT_EQ(__isless(subnormal, normal_small), 1);
    EXPECT_EQ(__isless(normal_small, subnormal), 0);
    EXPECT_EQ(__isless(-subnormal, subnormal), 1);
}

// Main function to run all tests
int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
