// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cstring>
#include <cassert>
#include <cmath>
#include <iostream>

namespace std {
namespace locale {

// Mock implementation of the _Impl class for testing purposes
class _Impl {
private:
    static const size_t _S_categories_size = 6; // Common locale categories count
    const char* _M_names[_S_categories_size];

public:
    // Constructor for testing - allows setting up different name configurations
    _Impl() {
        // Initialize all names to nullptr by default
        for (size_t i = 0; i < _S_categories_size; ++i) {
            _M_names[i] = nullptr;
        }
    }

    // Helper method to set names for testing
    void set_names(const char* names[], size_t count) {
        for (size_t i = 0; i < count && i < _S_categories_size; ++i) {
            _M_names[i] = names[i];
        }
    }

    // Helper method to set all names to the same value
    void set_all_names_same(const char* name) {
        for (size_t i = 0; i < _S_categories_size; ++i) {
            _M_names[i] = name;
        }
    }

    // Helper method to clear all names
    void clear_names() {
        for (size_t i = 0; i < _S_categories_size; ++i) {
            _M_names[i] = nullptr;
        }
    }

    // The function under test
    bool _M_check_same_name() {
        bool __ret = true;
        if (_M_names[1])
            // We must actually compare all the _M_names: can be all equal!
            for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
                __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
        return __ret;
    }
};

} // namespace locale
} // namespace std

// Test Suite for _M_check_same_name function
class CheckSameNameTest : public ::testing::Test {
protected:
    std::locale::_Impl impl;

    void SetUp() override {
        // Reset the implementation before each test
        impl.clear_names();
    }
};

// Positive Test Cases
TEST_F(CheckSameNameTest, AllNamesAreIdentical_ReturnsTrue) {
    // Test when all names are the same string
    impl.set_all_names_same("C");
    EXPECT_TRUE(impl._M_check_same_name());
}

TEST_F(CheckSameNameTest, AllNamesAreNull_ReturnsTrue) {
    // Test when all names are nullptr (default state)
    // Since _M_names[1] is nullptr, function should return true immediately
    EXPECT_TRUE(impl._M_check_same_name());
}

TEST_F(CheckSameNameTest, AllNamesAreSameLongString_ReturnsTrue) {
    // Test with longer identical strings
    impl.set_all_names_same("en_US.UTF-8");
    EXPECT_TRUE(impl._M_check_same_name());
}

// Negative Test Cases
TEST_F(CheckSameNameTest, DifferentNamesAtBeginning_ReturnsFalse) {
    // Test when first two names are different
    const char* names[] = {"C", "POSIX", "C", "C", "C", "C"};
    impl.set_names(names, 6);
    EXPECT_FALSE(impl._M_check_same_name());
}

TEST_F(CheckSameNameTest, DifferentNamesAtEnd_ReturnsFalse) {
    // Test when last two names are different
    const char* names[] = {"C", "C", "C", "C", "C", "POSIX"};
    impl.set_names(names, 6);
    EXPECT_FALSE(impl._M_check_same_name());
}

TEST_F(CheckSameNameTest, OneDifferentNameInMiddle_ReturnsFalse) {
    // Test when one name in the middle is different
    const char* names[] = {"C", "C", "POSIX", "C", "C", "C"};
    impl.set_names(names, 6);
    EXPECT_FALSE(impl._M_check_same_name());
}

// Edge Cases
TEST_F(CheckSameNameTest, FirstNameNullSecondNameNotNull_ReturnsTrue) {
    // Test edge case where _M_names[1] is nullptr but _M_names[0] is not
    // Since _M_names[1] is nullptr, the function should return true without comparison
    const char* names[] = {"C", nullptr, nullptr, nullptr, nullptr, nullptr};
    impl.set_names(names, 6);
    EXPECT_TRUE(impl._M_check_same_name());
}

TEST_F(CheckSameNameTest, EmptyStringsAllSame_ReturnsTrue) {
    // Test with all empty strings
    impl.set_all_names_same("");
    EXPECT_TRUE(impl._M_check_same_name());
}

TEST_F(CheckSameNameTest, CaseSensitiveDifference_ReturnsFalse) {
    // Test case sensitivity - "C" vs "c"
    const char* names[] = {"C", "c", "C", "C", "C", "C"};
    impl.set_names(names, 6);
    EXPECT_FALSE(impl._M_check_same_name());
}

TEST_F(CheckSameNameTest, SimilarButDifferentStrings_ReturnsFalse) {
    // Test with similar but different strings
    const char* names[] = {"en_US", "en_US", "en_UK", "en_US", "en_US", "en_US"};
    impl.set_names(names, 6);
    EXPECT_FALSE(impl._M_check_same_name());
}

TEST_F(CheckSameNameTest, WhitespaceInStrings_ReturnsFalse) {
    // Test with whitespace differences
    const char* names[] = {"C", "C ", "C", "C", "C", "C"};
    impl.set_names(names, 6);
    EXPECT_FALSE(impl._M_check_same_name());
}

// Boundary Test Cases
TEST_F(CheckSameNameTest, TwoIdenticalNames_ReturnsTrue) {
    // Test with minimal case - only first two names set and identical
    const char* names[] = {"C", "C", nullptr, nullptr, nullptr, nullptr};
    impl.set_names(names, 2);
    EXPECT_TRUE(impl._M_check_same_name());
}

TEST_F(CheckSameNameTest, LongLocaleNames_ReturnsTrue) {
    // Test with very long locale names
    const char* long_name = "en_US.UTF-8@collation=phonebook;currency=EUR";
    impl.set_all_names_same(long_name);
    EXPECT_TRUE(impl._M_check_same_name());
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
