// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __isgreaterf function
class IsGreaterFloatTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsGreaterFloatTest, PositiveCase_FirstGreaterThanSecond) {
    float_t x = 5.5f;
    float_t y = 3.2f;
    EXPECT_EQ(__isgreaterf(x, y), 1);
}

TEST_F(IsGreaterFloatTest, PositiveCase_LargePositiveNumbers) {
    float_t x = 1000000.0f;
    float_t y = 999999.0f;
    EXPECT_EQ(__isgreaterf(x, y), 1);
}

// Negative test cases
TEST_F(IsGreaterFloatTest, NegativeCase_FirstLessThanSecond) {
    float_t x = 2.1f;
    float_t y = 7.8f;
    EXPECT_EQ(__isgreaterf(x, y), 0);
}

TEST_F(IsGreaterFloatTest, NegativeCase_EqualValues) {
    float_t x = 4.5f;
    float_t y = 4.5f;
    EXPECT_EQ(__isgreaterf(x, y), 0);
}

// Edge case tests
TEST_F(IsGreaterFloatTest, EdgeCase_ZeroComparison) {
    float_t x = 0.1f;
    float_t y = 0.0f;
    EXPECT_EQ(__isgreaterf(x, y), 1);
    
    float_t x2 = 0.0f;
    float_t y2 = 0.1f;
    EXPECT_EQ(__isgreaterf(x2, y2), 0);
}

TEST_F(IsGreaterFloatTest, EdgeCase_NegativeNumbers) {
    float_t x = -2.5f;
    float_t y = -5.7f;
    EXPECT_EQ(__isgreaterf(x, y), 1);
}

TEST_F(IsGreaterFloatTest, EdgeCase_VerySmallDifference) {
    float_t x = 1.0000001f;
    float_t y = 1.0000000f;
    EXPECT_EQ(__isgreaterf(x, y), 1);
}

TEST_F(IsGreaterFloatTest, EdgeCase_InfinityComparison) {
    float_t x = std::numeric_limits<float_t>::infinity();
    float_t y = 1000.0f;
    EXPECT_EQ(__isgreaterf(x, y), 1);
    
    float_t x2 = 1000.0f;
    float_t y2 = std::numeric_limits<float_t>::infinity();
    EXPECT_EQ(__isgreaterf(x2, y2), 0);
}

TEST_F(IsGreaterFloatTest, EdgeCase_NaNComparison) {
    float_t x = std::numeric_limits<float_t>::quiet_NaN();
    float_t y = 5.0f;
    EXPECT_EQ(__isgreaterf(x, y), 0);
    
    float_t x2 = 5.0f;
    float_t y2 = std::numeric_limits<float_t>::quiet_NaN();
    EXPECT_EQ(__isgreaterf(x2, y2), 0);
    
    float_t x3 = std::numeric_limits<float_t>::quiet_NaN();
    float_t y3 = std::numeric_limits<float_t>::quiet_NaN();
    EXPECT_EQ(__isgreaterf(x3, y3), 0);
}

TEST_F(IsGreaterFloatTest, EdgeCase_MaxMinValues) {
    float_t x = std::numeric_limits<float_t>::max();
    float_t y = std::numeric_limits<float_t>::min();
    EXPECT_EQ(__isgreaterf(x, y), 1);
    
    float_t x2 = std::numeric_limits<float_t>::min();
    float_t y2 = std::numeric_limits<float_t>::max();
    EXPECT_EQ(__isgreaterf(x2, y2), 0);
}

TEST_F(IsGreaterFloatTest, EdgeCase_PositiveNegativeZero) {
    float_t x = 0.0f;
    float_t y = -0.0f;
    EXPECT_EQ(__isgreaterf(x, y), 0);  // 0.0 and -0.0 are equal
    
    float_t x2 = -0.0f;
    float_t y2 = 0.0f;
    EXPECT_EQ(__isgreaterf(x2, y2), 0);  // -0.0 and 0.0 are equal
}

// Additional boundary tests
TEST_F(IsGreaterFloatTest, BoundaryCase_DenormalizedNumbers) {
    float_t x = std::numeric_limits<float_t>::denorm_min();
    float_t y = 0.0f;
    EXPECT_EQ(__isgreaterf(x, y), 1);
    
    float_t x2 = 0.0f;
    float_t y2 = std::numeric_limits<float_t>::denorm_min();
    EXPECT_EQ(__isgreaterf(x2, y2), 0);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
