// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <system_error>
#include <iostream>

// Test suite for std::system_error::code() method
class SystemErrorCodeTest : public ::testing::Test {
protected:
    void SetUp() override {
        // Setup code if needed
    }

    void TearDown() override {
        // Cleanup code if needed
    }
};

// Positive test case 1: Test code() method with generic error category
TEST_F(SystemErrorCodeTest, CodeReturnsCorrectErrorCodeGeneric) {
    std::error_code ec = std::make_error_code(std::errc::invalid_argument);
    std::system_error sys_err(ec, "Test error message");
    
    const std::error_code& returned_code = sys_err.code();
    
    EXPECT_EQ(returned_code, ec);
    EXPECT_EQ(returned_code.value(), static_cast<int>(std::errc::invalid_argument));
    EXPECT_EQ(returned_code.category(), std::generic_category());
}

// Positive test case 2: Test code() method with system error category
TEST_F(SystemErrorCodeTest, CodeReturnsCorrectErrorCodeSystem) {
    std::error_code ec(ENOENT, std::system_category());
    std::system_error sys_err(ec, "File not found");
    
    const std::error_code& returned_code = sys_err.code();
    
    EXPECT_EQ(returned_code, ec);
    EXPECT_EQ(returned_code.value(), ENOENT);
    EXPECT_EQ(returned_code.category(), std::system_category());
}

// Positive test case 3: Test code() method with custom error code value
TEST_F(SystemErrorCodeTest, CodeReturnsCorrectCustomErrorCode) {
    std::error_code ec(42, std::generic_category());
    std::system_error sys_err(ec, "Custom error");
    
    const std::error_code& returned_code = sys_err.code();
    
    EXPECT_EQ(returned_code, ec);
    EXPECT_EQ(returned_code.value(), 42);
    EXPECT_EQ(returned_code.category(), std::generic_category());
}

// Negative test case 1: Test code() method with zero error code (success)
TEST_F(SystemErrorCodeTest, CodeReturnsZeroErrorCode) {
    std::error_code ec; // Default constructed error_code has value 0
    std::system_error sys_err(ec, "No error");
    
    const std::error_code& returned_code = sys_err.code();
    
    EXPECT_EQ(returned_code, ec);
    EXPECT_EQ(returned_code.value(), 0);
    EXPECT_FALSE(returned_code); // Should evaluate to false for success
}

// Negative test case 2: Test code() method with different error categories
TEST_F(SystemErrorCodeTest, CodeReturnsDifferentCategories) {
    std::error_code ec1(1, std::generic_category());
    std::error_code ec2(1, std::system_category());
    std::system_error sys_err1(ec1, "Generic error");
    std::system_error sys_err2(ec2, "System error");
    
    const std::error_code& returned_code1 = sys_err1.code();
    const std::error_code& returned_code2 = sys_err2.code();
    
    EXPECT_EQ(returned_code1.value(), returned_code2.value());
    EXPECT_NE(returned_code1.category(), returned_code2.category());
    EXPECT_NE(returned_code1, returned_code2); // Different categories make them unequal
}

// Edge case test 1: Test code() method with maximum integer value
TEST_F(SystemErrorCodeTest, CodeReturnsMaxIntegerValue) {
    std::error_code ec(std::numeric_limits<int>::max(), std::generic_category());
    std::system_error sys_err(ec, "Maximum error code");
    
    const std::error_code& returned_code = sys_err.code();
    
    EXPECT_EQ(returned_code, ec);
    EXPECT_EQ(returned_code.value(), std::numeric_limits<int>::max());
}

// Edge case test 2: Test code() method with negative error code value
TEST_F(SystemErrorCodeTest, CodeReturnsNegativeValue) {
    std::error_code ec(-1, std::generic_category());
    std::system_error sys_err(ec, "Negative error code");
    
    const std::error_code& returned_code = sys_err.code();
    
    EXPECT_EQ(returned_code, ec);
    EXPECT_EQ(returned_code.value(), -1);
}

// Test for noexcept guarantee
TEST_F(SystemErrorCodeTest, CodeMethodIsNoexcept) {
    std::error_code ec = std::make_error_code(std::errc::operation_not_permitted);
    std::system_error sys_err(ec, "Test for noexcept");
    
    // This test verifies that the method can be called and doesn't throw
    EXPECT_NO_THROW({
        const std::error_code& returned_code = sys_err.code();
        (void)returned_code; // Suppress unused variable warning
    });
}

// Test for const correctness
TEST_F(SystemErrorCodeTest, CodeMethodWorksOnConstObject) {
    std::error_code ec = std::make_error_code(std::errc::permission_denied);
    const std::system_error sys_err(ec, "Const object test");
    
    const std::error_code& returned_code = sys_err.code();
    
    EXPECT_EQ(returned_code, ec);
    EXPECT_EQ(returned_code.value(), static_cast<int>(std::errc::permission_denied));
}

// Test for reference stability
TEST_F(SystemErrorCodeTest, CodeReturnsStableReference) {
    std::error_code ec = std::make_error_code(std::errc::resource_unavailable_try_again);
    std::system_error sys_err(ec, "Reference stability test");
    
    const std::error_code& ref1 = sys_err.code();
    const std::error_code& ref2 = sys_err.code();
    
    // Both references should point to the same object
    EXPECT_EQ(&ref1, &ref2);
    EXPECT_EQ(ref1, ref2);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
