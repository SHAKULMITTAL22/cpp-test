// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>
#include <cassert>
#include <iostream>

// Test suite for __islessf function
class IsLessfTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsLessfTest, PositiveCase_FirstLessThanSecond) {
    // Test when first argument is clearly less than second
    EXPECT_EQ(__islessf(1.0f, 2.0f), 1);
    EXPECT_EQ(__islessf(-5.5f, -2.3f), 1);
    EXPECT_EQ(__islessf(0.0f, 1.0f), 1);
    EXPECT_EQ(__islessf(-10.0f, 10.0f), 1);
}

TEST_F(IsLessfTest, PositiveCase_VerySmallDifferences) {
    // Test with very small differences between values
    float_t small_val = 1.0f;
    float_t slightly_larger = 1.0f + std::numeric_limits<float_t>::epsilon() * 2;
    EXPECT_EQ(__islessf(small_val, slightly_larger), 1);
    
    EXPECT_EQ(__islessf(-1000.0f, -999.999f), 1);
}

// Negative test cases
TEST_F(IsLessfTest, NegativeCase_FirstGreaterThanSecond) {
    // Test when first argument is greater than second
    EXPECT_EQ(__islessf(5.0f, 3.0f), 0);
    EXPECT_EQ(__islessf(0.0f, -1.0f), 0);
    EXPECT_EQ(__islessf(100.5f, 50.25f), 0);
    EXPECT_EQ(__islessf(-2.0f, -10.0f), 0);
}

TEST_F(IsLessfTest, NegativeCase_EqualValues) {
    // Test when both arguments are equal
    EXPECT_EQ(__islessf(5.0f, 5.0f), 0);
    EXPECT_EQ(__islessf(0.0f, 0.0f), 0);
    EXPECT_EQ(__islessf(-3.14f, -3.14f), 0);
    EXPECT_EQ(__islessf(-0.0f, 0.0f), 0);  // Positive and negative zero
}

// Edge case tests
TEST_F(IsLessfTest, EdgeCase_InfinityValues) {
    // Test with infinity values
    float_t pos_inf = std::numeric_limits<float_t>::infinity();
    float_t neg_inf = -std::numeric_limits<float_t>::infinity();
    
    EXPECT_EQ(__islessf(neg_inf, pos_inf), 1);
    EXPECT_EQ(__islessf(1.0f, pos_inf), 1);
    EXPECT_EQ(__islessf(neg_inf, 1.0f), 1);
    EXPECT_EQ(__islessf(pos_inf, 1.0f), 0);
    EXPECT_EQ(__islessf(pos_inf, pos_inf), 0);
    EXPECT_EQ(__islessf(neg_inf, neg_inf), 0);
}

TEST_F(IsLessfTest, EdgeCase_NaNValues) {
    // Test with NaN values - should return 0 due to isunordered check
    float_t nan_val = std::numeric_limits<float_t>::quiet_NaN();
    
    EXPECT_EQ(__islessf(nan_val, 1.0f), 0);
    EXPECT_EQ(__islessf(1.0f, nan_val), 0);
    EXPECT_EQ(__islessf(nan_val, nan_val), 0);
    EXPECT_EQ(__islessf(nan_val, std::numeric_limits<float_t>::infinity()), 0);
}

TEST_F(IsLessfTest, EdgeCase_MinMaxValues) {
    // Test with minimum and maximum float values
    float_t min_val = std::numeric_limits<float_t>::lowest();
    float_t max_val = std::numeric_limits<float_t>::max();
    
    EXPECT_EQ(__islessf(min_val, max_val), 1);
    EXPECT_EQ(__islessf(max_val, min_val), 0);
    EXPECT_EQ(__islessf(min_val, 0.0f), 1);
    EXPECT_EQ(__islessf(0.0f, max_val), 1);
}

TEST_F(IsLessfTest, EdgeCase_DenormalizedNumbers) {
    // Test with very small denormalized numbers
    float_t min_positive = std::numeric_limits<float_t>::denorm_min();
    float_t small_normal = std::numeric_limits<float_t>::min();
    
    EXPECT_EQ(__islessf(min_positive, small_normal), 1);
    EXPECT_EQ(__islessf(-min_positive, min_positive), 1);
    EXPECT_EQ(__islessf(0.0f, min_positive), 1);
}

TEST_F(IsLessfTest, AdditionalNegativeCase_ZeroComparisons) {
    // Additional negative test cases with zero
    EXPECT_EQ(__islessf(0.0f, -0.0f), 0);
    EXPECT_EQ(__islessf(-0.0f, 0.0f), 0);
    EXPECT_EQ(__islessf(1.0f, 0.0f), 0);
}

TEST_F(IsLessfTest, AdditionalPositiveCase_NegativeNumbers) {
    // Additional positive test cases with negative numbers
    EXPECT_EQ(__islessf(-100.0f, -50.0f), 1);
    EXPECT_EQ(__islessf(-0.001f, 0.001f), 1);
    EXPECT_EQ(__islessf(-std::numeric_limits<float_t>::max(), 
                       -std::numeric_limits<float_t>::max() / 2.0f), 1);
}

// Main function to run all tests
int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
