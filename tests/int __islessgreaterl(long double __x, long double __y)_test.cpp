// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __islessgreaterl function
class IsLessGreaterLTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsLessGreaterLTest, PositiveNumbers_ReturnsTrue) {
    // Test with different positive numbers
    EXPECT_EQ(__islessgreaterl(1.0L, 2.0L), 1);
    EXPECT_EQ(__islessgreaterl(2.0L, 1.0L), 1);
    EXPECT_EQ(__islessgreaterl(3.14159L, 2.71828L), 1);
}

TEST_F(IsLessGreaterLTest, NegativeNumbers_ReturnsTrue) {
    // Test with different negative numbers
    EXPECT_EQ(__islessgreaterl(-1.0L, -2.0L), 1);
    EXPECT_EQ(__islessgreaterl(-2.0L, -1.0L), 1);
    EXPECT_EQ(__islessgreaterl(-0.5L, -1.5L), 1);
}

TEST_F(IsLessGreaterLTest, MixedSignNumbers_ReturnsTrue) {
    // Test with positive and negative numbers
    EXPECT_EQ(__islessgreaterl(1.0L, -1.0L), 1);
    EXPECT_EQ(__islessgreaterl(-1.0L, 1.0L), 1);
    EXPECT_EQ(__islessgreaterl(0.0L, -1.0L), 1);
    EXPECT_EQ(__islessgreaterl(1.0L, 0.0L), 1);
}

// Negative test cases
TEST_F(IsLessGreaterLTest, EqualNumbers_ReturnsFalse) {
    // Test with equal numbers
    EXPECT_EQ(__islessgreaterl(1.0L, 1.0L), 0);
    EXPECT_EQ(__islessgreaterl(0.0L, 0.0L), 0);
    EXPECT_EQ(__islessgreaterl(-1.0L, -1.0L), 0);
    EXPECT_EQ(__islessgreaterl(3.14159L, 3.14159L), 0);
}

TEST_F(IsLessGreaterLTest, NaNValues_ReturnsFalse) {
    // Test with NaN values - should return false due to isunordered check
    long double nan_val = std::numeric_limits<long double>::quiet_NaN();
    EXPECT_EQ(__islessgreaterl(nan_val, 1.0L), 0);
    EXPECT_EQ(__islessgreaterl(1.0L, nan_val), 0);
    EXPECT_EQ(__islessgreaterl(nan_val, nan_val), 0);
}

// Edge case tests
TEST_F(IsLessGreaterLTest, InfinityValues_ReturnsCorrectResult) {
    // Test with infinity values
    long double pos_inf = std::numeric_limits<long double>::infinity();
    long double neg_inf = -std::numeric_limits<long double>::infinity();
    
    EXPECT_EQ(__islessgreaterl(pos_inf, 1.0L), 1);
    EXPECT_EQ(__islessgreaterl(1.0L, pos_inf), 1);
    EXPECT_EQ(__islessgreaterl(neg_inf, 1.0L), 1);
    EXPECT_EQ(__islessgreaterl(1.0L, neg_inf), 1);
    EXPECT_EQ(__islessgreaterl(pos_inf, neg_inf), 1);
    EXPECT_EQ(__islessgreaterl(neg_inf, pos_inf), 1);
    
    // Equal infinities should return false
    EXPECT_EQ(__islessgreaterl(pos_inf, pos_inf), 0);
    EXPECT_EQ(__islessgreaterl(neg_inf, neg_inf), 0);
}

TEST_F(IsLessGreaterLTest, VerySmallNumbers_ReturnsTrue) {
    // Test with very small numbers near machine epsilon
    long double epsilon = std::numeric_limits<long double>::epsilon();
    EXPECT_EQ(__islessgreaterl(epsilon, 2.0L * epsilon), 1);
    EXPECT_EQ(__islessgreaterl(2.0L * epsilon, epsilon), 1);
}

TEST_F(IsLessGreaterLTest, ZeroComparisons_ReturnsCorrectResult) {
    // Test comparisons involving zero
    EXPECT_EQ(__islessgreaterl(0.0L, 1.0L), 1);
    EXPECT_EQ(__islessgreaterl(1.0L, 0.0L), 1);
    EXPECT_EQ(__islessgreaterl(-0.0L, 0.0L), 0);  // -0.0 == 0.0
    EXPECT_EQ(__islessgreaterl(0.0L, -0.0L), 0);  // 0.0 == -0.0
}

TEST_F(IsLessGreaterLTest, MaxMinValues_ReturnsTrue) {
    // Test with maximum and minimum representable values
    long double max_val = std::numeric_limits<long double>::max();
    long double min_val = std::numeric_limits<long double>::lowest();
    
    EXPECT_EQ(__islessgreaterl(max_val, min_val), 1);
    EXPECT_EQ(__islessgreaterl(min_val, max_val), 1);
    EXPECT_EQ(__islessgreaterl(max_val, 0.0L), 1);
    EXPECT_EQ(__islessgreaterl(min_val, 0.0L), 1);
}

TEST_F(IsLessGreaterLTest, DenormalizedNumbers_ReturnsCorrectResult) {
    // Test with denormalized numbers
    long double denorm_min = std::numeric_limits<long double>::denorm_min();
    EXPECT_EQ(__islessgreaterl(denorm_min, 1.0L), 1);
    EXPECT_EQ(__islessgreaterl(1.0L, denorm_min), 1);
    EXPECT_EQ(__islessgreaterl(denorm_min, denorm_min), 0);
}

// Main function to run all tests
int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
