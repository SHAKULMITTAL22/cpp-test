// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __isgreater function
class IsGreaterTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsGreaterTest, PositiveNumbers_FirstGreaterThanSecond) {
    EXPECT_EQ(__isgreater(5.0, 3.0), 1);
    EXPECT_EQ(__isgreater(10.5, 2.3), 1);
    EXPECT_EQ(__isgreater(100.0, 99.999), 1);
}

TEST_F(IsGreaterTest, NegativeNumbers_FirstGreaterThanSecond) {
    EXPECT_EQ(__isgreater(-1.0, -5.0), 1);
    EXPECT_EQ(__isgreater(-0.5, -2.8), 1);
    EXPECT_EQ(__isgreater(-10.0, -100.0), 1);
}

TEST_F(IsGreaterTest, MixedNumbers_PositiveGreaterThanNegative) {
    EXPECT_EQ(__isgreater(1.0, -1.0), 1);
    EXPECT_EQ(__isgreater(0.1, -0.1), 1);
    EXPECT_EQ(__isgreater(50.0, -25.0), 1);
}

// Negative test cases
TEST_F(IsGreaterTest, EqualNumbers_ReturnsFalse) {
    EXPECT_EQ(__isgreater(5.0, 5.0), 0);
    EXPECT_EQ(__isgreater(-3.5, -3.5), 0);
    EXPECT_EQ(__isgreater(0.0, 0.0), 0);
}

TEST_F(IsGreaterTest, FirstLessThanSecond_ReturnsFalse) {
    EXPECT_EQ(__isgreater(3.0, 5.0), 0);
    EXPECT_EQ(__isgreater(-10.0, -5.0), 0);
    EXPECT_EQ(__isgreater(-1.0, 1.0), 0);
}

TEST_F(IsGreaterTest, NegativeZeroVsPositiveZero_ReturnsFalse) {
    EXPECT_EQ(__isgreater(-0.0, 0.0), 0);
    EXPECT_EQ(__isgreater(0.0, -0.0), 0);
}

// Edge cases
TEST_F(IsGreaterTest, InfinityComparisons) {
    double pos_inf = std::numeric_limits<double>::infinity();
    double neg_inf = -std::numeric_limits<double>::infinity();
    
    EXPECT_EQ(__isgreater(pos_inf, 1000.0), 1);
    EXPECT_EQ(__isgreater(1000.0, neg_inf), 1);
    EXPECT_EQ(__isgreater(pos_inf, neg_inf), 1);
    EXPECT_EQ(__isgreater(1000.0, pos_inf), 0);
    EXPECT_EQ(__isgreater(neg_inf, 1000.0), 0);
}

TEST_F(IsGreaterTest, NaNComparisons_ReturnsFalse) {
    double nan_val = std::numeric_limits<double>::quiet_NaN();
    double normal_val = 5.0;
    
    // NaN comparisons should always return false due to isunordered check
    EXPECT_EQ(__isgreater(nan_val, normal_val), 0);
    EXPECT_EQ(__isgreater(normal_val, nan_val), 0);
    EXPECT_EQ(__isgreater(nan_val, nan_val), 0);
}

TEST_F(IsGreaterTest, VerySmallNumbers_Precision) {
    double epsilon = std::numeric_limits<double>::epsilon();
    double small_diff = epsilon * 2.0;
    
    EXPECT_EQ(__isgreater(1.0 + small_diff, 1.0), 1);
    EXPECT_EQ(__isgreater(1.0, 1.0 + small_diff), 0);
}

TEST_F(IsGreaterTest, MaxMinValues) {
    double max_val = std::numeric_limits<double>::max();
    double min_val = std::numeric_limits<double>::lowest();
    
    EXPECT_EQ(__isgreater(max_val, min_val), 1);
    EXPECT_EQ(__isgreater(min_val, max_val), 0);
    EXPECT_EQ(__isgreater(max_val, 0.0), 1);
    EXPECT_EQ(__isgreater(0.0, min_val), 1);
}

TEST_F(IsGreaterTest, DenormalizedNumbers) {
    double denorm = std::numeric_limits<double>::denorm_min();
    
    EXPECT_EQ(__isgreater(denorm, 0.0), 1);
    EXPECT_EQ(__isgreater(0.0, denorm), 0);
    EXPECT_EQ(__isgreater(1.0, denorm), 1);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
