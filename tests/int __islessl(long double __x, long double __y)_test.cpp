// ********RoostGPT********
// Test generated by RoostGPT for test cpp-test-1908 using AI Type Claude AI and AI Model claude-sonnet-4-20250514



// ********RoostGPT********
#include <gtest/gtest.h>
#include <cmath>
#include <limits>

// Test suite for __islessl function
class IsLessLongDoubleTest : public ::testing::Test {
protected:
    void SetUp() override {}
    void TearDown() override {}
};

// Positive test cases
TEST_F(IsLessLongDoubleTest, PositiveCase_FirstLessThanSecond) {
    long double x = 1.5L;
    long double y = 2.5L;
    EXPECT_EQ(__islessl(x, y), 1);
}

TEST_F(IsLessLongDoubleTest, PositiveCase_NegativeNumbers) {
    long double x = -5.0L;
    long double y = -3.0L;
    EXPECT_EQ(__islessl(x, y), 1);
}

// Negative test cases
TEST_F(IsLessLongDoubleTest, NegativeCase_FirstGreaterThanSecond) {
    long double x = 10.0L;
    long double y = 5.0L;
    EXPECT_EQ(__islessl(x, y), 0);
}

TEST_F(IsLessLongDoubleTest, NegativeCase_EqualValues) {
    long double x = 3.14159L;
    long double y = 3.14159L;
    EXPECT_EQ(__islessl(x, y), 0);
}

// Edge cases
TEST_F(IsLessLongDoubleTest, EdgeCase_ZeroComparison) {
    long double x = -0.0L;
    long double y = 0.0L;
    EXPECT_EQ(__islessl(x, y), 0);  // -0.0 is equal to 0.0
}

TEST_F(IsLessLongDoubleTest, EdgeCase_InfinityComparison) {
    long double x = std::numeric_limits<long double>::infinity();
    long double y = std::numeric_limits<long double>::infinity();
    EXPECT_EQ(__islessl(x, y), 0);  // infinity equals infinity
}

TEST_F(IsLessLongDoubleTest, EdgeCase_NegativeInfinityVsPositiveInfinity) {
    long double x = -std::numeric_limits<long double>::infinity();
    long double y = std::numeric_limits<long double>::infinity();
    EXPECT_EQ(__islessl(x, y), 1);  // -infinity < +infinity
}

TEST_F(IsLessLongDoubleTest, EdgeCase_MaxValueVsInfinity) {
    long double x = std::numeric_limits<long double>::max();
    long double y = std::numeric_limits<long double>::infinity();
    EXPECT_EQ(__islessl(x, y), 1);  // max value < infinity
}

TEST_F(IsLessLongDoubleTest, EdgeCase_MinValueComparison) {
    long double x = std::numeric_limits<long double>::lowest();
    long double y = std::numeric_limits<long double>::min();
    EXPECT_EQ(__islessl(x, y), 1);  // lowest < min positive value
}

// NaN handling test cases
TEST_F(IsLessLongDoubleTest, NaNCase_FirstArgumentNaN) {
    long double x = std::numeric_limits<long double>::quiet_NaN();
    long double y = 5.0L;
    EXPECT_EQ(__islessl(x, y), 0);  // NaN comparisons return false
}

TEST_F(IsLessLongDoubleTest, NaNCase_SecondArgumentNaN) {
    long double x = 5.0L;
    long double y = std::numeric_limits<long double>::quiet_NaN();
    EXPECT_EQ(__islessl(x, y), 0);  // NaN comparisons return false
}

TEST_F(IsLessLongDoubleTest, NaNCase_BothArgumentsNaN) {
    long double x = std::numeric_limits<long double>::quiet_NaN();
    long double y = std::numeric_limits<long double>::quiet_NaN();
    EXPECT_EQ(__islessl(x, y), 0);  // NaN comparisons return false
}

// Boundary value test cases
TEST_F(IsLessLongDoubleTest, BoundaryCase_VerySmallDifference) {
    long double x = 1.0L;
    long double y = 1.0L + std::numeric_limits<long double>::epsilon();
    EXPECT_EQ(__islessl(x, y), 1);  // x < y by epsilon
}

TEST_F(IsLessLongDoubleTest, BoundaryCase_DenormalizedNumbers) {
    long double x = std::numeric_limits<long double>::denorm_min();
    long double y = std::numeric_limits<long double>::min();
    EXPECT_EQ(__islessl(x, y), 1);  // denorm_min < min
}

TEST_F(IsLessLongDoubleTest, BoundaryCase_NearZeroValues) {
    long double x = -std::numeric_limits<long double>::min();
    long double y = std::numeric_limits<long double>::min();
    EXPECT_EQ(__islessl(x, y), 1);  // negative min < positive min
}

// Main function to run all tests
int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
